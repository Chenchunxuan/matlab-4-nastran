classdef NastranSubcaseResult < matlab.mixin.Copyable
    %NastraSubcaseResults Summary of this class goes here
    %   Detailed explanation goes here
    
    %% Properties
    properties
        SubcaseNo                   % subcase number
        ParentAnalysis              % parent NastranAnalysis object
        EigenvalueArray             % array of NastranEigenvalue objects
        DisplacementArray           % array of NastranDisplacement objects
        ForceSpcArray               % array of NastranForce objects related to single-point constraint
        GridPointForceBalanceArray  % array of NastranGridPointForceBalance objects
        StrainInElementArray = NastranStrainInElement.empty;    % array of StrainInElement objects
        StressInElementArray = NastranStressInElement.empty;    % array of StressInElement objcets
        StructuralMonitorPointIntegratedLoadsArray  % array of NastranMonitorPointIntegratedLoads objects related to structural loads
        AerodynamicMonitorPointIntegratedLoadsArray % array of NastranMonitorPointIntegratedLoads objects related to aerodynamic loads
        StructuralMonitorPointDisplacementsArray    % array of NastranMonitorPointDisplacement objects
    end
    
    methods
        %% Constructor
        function obj = NastranSubcaseResult(subcaseResultStruct)
            %NastraSubcaseResults Construct an instance of this class
            %   Detailed explanation goes here
            
            % If number of input arguments is not zero then initialize the
            % object array with the size of the input structure
            if nargin ~= 0
                [m,n] = size(subcaseResultStruct);
                obj(m,n) = NastranSubcaseResult;
                % Iterate through the elements of the input structure
                for i = m:-1:1
                    for j = n:-1:1
                        % Assign properties
                        if isfield(subcaseResultStruct,'subcaseNo')
                            obj(i,j).SubcaseNo =...
                                subcaseResultStruct(i,j).subcaseNo;
                        end
                        if isfield(subcaseResultStruct,...
                                'eigenvalueArray')
                            obj(i,j).EigenvalueArray =...
                                subcaseResultStruct(i,...
                                j).eigenvalueArray;
                        end
                        if isfield(subcaseResultStruct,...
                                'displacementArray')
                            obj(i,j).DisplacementArray =...
                                subcaseResultStruct(i,...
                                j).displacementArray;
                        end
                        if isfield(subcaseResultStruct,...
                                'forceSpcArray')
                            obj(i,j).ForceSpcArray =...
                                subcaseResultStruct(i,...
                                j).forceSpcArray;
                        end
                        if isfield(subcaseResultStruct,...
                                'gridPointForceBalanceArray')
                            obj(i,j).GridPointForceBalanceArray =...
                                subcaseResultStruct(i,...
                                j).gridPointForceBalanceArray;
                        end
                        if isfield(subcaseResultStruct,...
                                'strainInElementArray')
                            obj(i,j).StrainInElementArray =...
                                subcaseResultStruct(i,...
                                j).strainInElementArray;
                        end
                        if isfield(subcaseResultStruct,...
                                'stressInElementArray')
                            obj(i,j).StressInElementArray =...
                                subcaseResultStruct(i,...
                                j).stressInElementArray;
                        end
                        if isfield(subcaseResultStruct,...
                                'structuralMonitorPointIntegratedLoadArray')
                            obj(i,j).StructuralMonitorPointIntegratedLoadArray =...
                                subcaseResultStruct(i,...
                                j).structuralMonitorPointIntegratedLoadArray;
                        end
                    end
                end
            end
        end
        
        %% EigenvalueArray set method
        function set.EigenvalueArray(obj,eigenvalueArray)
            obj.EigenvalueArray = eigenvalueArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranEigenvalue objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(eigenvalueArray,1),size(eigenvalueArray,2)));
            [obj.EigenvalueArray.ParentSubcase] = parentSubcaseArray{:};
        end
        
        %% DisplacementArray set method
        function set.DisplacementArray(obj,displacementArray)
            obj.DisplacementArray = displacementArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranDisplcementVector objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(displacementArray,1),...
                size(displacementArray,2)));
            [obj.DisplacementArray.ParentSubcase] =...
                parentSubcaseArray{:};
        end
        %% ForceSpcArray set method
        function set.ForceSpcArray(obj,forceSpcArray)
            obj.ForceSpcArray = forceSpcArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranDisplcementVector objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(forceSpcArray,1),...
                size(forceSpcArray,2)));
            [obj.ForceSpcArray.ParentSubcase] =...
                parentSubcaseArray{:};
        end
        
        %% StrainInElementArray set method
        function set.StrainInElementArray(obj,strainInElementArray)
            obj.StrainInElementArray = strainInElementArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranStrainInElement objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(strainInElementArray,1),...
                size(strainInElementArray,2)));
            [obj.StrainInElementArray.ParentSubcase] =...
                parentSubcaseArray{:};
        end
        
        %% StressInElementArray set method
        function set.StressInElementArray(obj,stressInElementArray)
            obj.StressInElementArray = stressInElementArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranStrressInElement objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(stressInElementArray,1),...
                size(stressInElementArray,2)));
            [obj.StressInElementArray.ParentSubcase] =...
                parentSubcaseArray{:};
        end
        
        %% StructuralMonitorPointIntegratedLoadsArray set method
        function set.StructuralMonitorPointDisplacementsArray(obj,...
                structuralMonitorPointDisplacementsArray)
            obj.StructuralMonitorPointDisplacementsArray =...
                structuralMonitorPointDisplacementsArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranMonitorPointIntegratedLoads objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(structuralMonitorPointDisplacementsArray,1),...
                size(structuralMonitorPointDisplacementsArray,2)));
            [obj.StructuralMonitorPointDisplacementsArray.ParentSubcase...
                ] = parentSubcaseArray{:};
        end
        
        %% StructuralMonitorPointIntegratedLoadsArray set method
        function set.StructuralMonitorPointIntegratedLoadsArray(obj,...
                structuralMonitorPointIntegratedLoadsArray)
            obj.StructuralMonitorPointIntegratedLoadsArray =...
                structuralMonitorPointIntegratedLoadsArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranMonitorPointIntegratedLoads objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(structuralMonitorPointIntegratedLoadsArray,1),...
                size(structuralMonitorPointIntegratedLoadsArray,2)));
            [obj.StructuralMonitorPointIntegratedLoadsArray.ParentSubcase...
                ] = parentSubcaseArray{:};
        end
        
        %% AerodynamicMonitorPointIntegratedLoadsArray set method
        function set.AerodynamicMonitorPointIntegratedLoadsArray(obj,...
                aerodynamicMonitorPointIntegratedLoadsArray)
            obj.AerodynamicMonitorPointIntegratedLoadsArray =...
                aerodynamicMonitorPointIntegratedLoadsArray;
            % Assign current NastranSubcaseResult object as parent of all
            % NastranMonitorPointIntegratedLoads objects in input
            parentSubcaseArray = num2cell(repmat(obj,...
                size(aerodynamicMonitorPointIntegratedLoadsArray,1),...
                size(aerodynamicMonitorPointIntegratedLoadsArray,2)));
            [obj.AerodynamicMonitorPointIntegratedLoadsArray.ParentSubcase...
                ] = parentSubcaseArray{:};
        end
        
        %% Plot stresses in part array
        function plotStress(obj,partNameArray,stressUnits)
            % Obtain scale factor from units input
            if nargin>=3
                switch lower(stressUnits)
                    case 'mpa'
                        scaleFactor = 1e-6;
                        stressUnits = 'MPa';
                end
            else
                scaleFactor = 1;
                stressUnits = 'Pa';
            end
            % Create figure and tab group
            figHandle = figure(...
                'Name',sprintf('Stress Plot Subcase %d',obj.SubcaseNo),...
                'NumberTitle','off',...
                'units','normalized',...
                'outerposition',[0 0 1 1]);
            pos = get(figHandle,'Position');
            set(figHandle,'PaperPositionMode','Auto',...
                'PaperUnits','Inches',...
                'PaperSize',[pos(3),pos(4)])
            tabGroupHandle = uitabgroup(figHandle);
            % Create tab and axes for each stress type
            normalXTab = uitab(tabGroupHandle,'Title','Normal-x');
            normalXAxes = axes('Parent',normalXTab);
            hold(normalXAxes,'on')
            normalYTab = uitab(tabGroupHandle,'Title','Normal-y');
            normalYAxes = axes('Parent',normalYTab);
            hold(normalYAxes,'on')
            shearXyTab = uitab(tabGroupHandle,'Title','Shear-xy');
            shearXyAxes = axes('Parent',shearXyTab);
            hold(shearXyAxes,'on')
            majorTab = uitab(tabGroupHandle,'Title','Major');
            majorAxes = axes('Parent',majorTab);
            hold(majorAxes,'on')
            minorTab = uitab(tabGroupHandle,'Title','Minor');
            minorAxes = axes('Parent',minorTab);
            hold(minorAxes,'on')
            maxShearTab = uitab(tabGroupHandle,'Title','Max Shear');
            maxShearAxes = axes('Parent',maxShearTab);
            hold(maxShearAxes,'on')
            % Initialize stress variables
            meanNormalXCquad4 = {};
            meanNormalYCquad4 = {};
            meanShearXyCquad4 = {};
            meanMajorCquad4 = {};
            meanMinorCquad4 = {};
            meanMaxShearCquad4 = {};
            meanNormalXCtria3 = {};
            meanNormalYCtria3 = {};
            meanShearXyCtria3 = {};
            meanMajorCtria3 = {};
            meanMinorCtria3 = {};
            meanMaxShearCtria3 = {};
            cquad4CentroidCoordinateArray = {};
            ctria3CentroidCoordinateArray = {};
            %-------------------------------------------------------------%
            % Plot stresses
            % Get all cquad4 and ctria3 of requested NastranPart objects
            selectedCquad4Array = obj.ParentAnalysis.BulkData.PartArray(...
                ismember({obj.ParentAnalysis.BulkData.PartArray.Name},...
                partNameArray)).getAllCquad4Elements;
            selectedCtria3Array = obj.ParentAnalysis.BulkData.PartArray(...
                ismember({obj.ParentAnalysis.BulkData.PartArray.Name},...
                partNameArray)).getAllCtria3Elements;
            % Generate cell array including all elements in the
            % NastranStressInElement object array
            allElementsArray = {obj.StressInElementArray.ParentElement};
            % Find ids corresponding to elements of requested parts
            cquad4OfSelectedPartsLogical = ismember(...
                cellfun(@(x) x.Eid,allElementsArray),...
                [selectedCquad4Array.Eid]);
            ctria3OfSelectedPartsLogical = ismember(...
                cellfun(@(x) x.Eid,allElementsArray),...
                [selectedCtria3Array.Eid]);
            if any(cquad4OfSelectedPartsLogical)
                % If Cquad4 elements are present in the selected parts
                % retrieve deformed coordinates of the grid points
                gridIdSelectedPartsArray = cell2mat(arrayfun(@(x)...
                    vertcat(x.GridArray.Id),[obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).ParentElement],...
                    'UniformOutput',false));
                gridFromDisplacementArray =...
                    [obj.DisplacementArray.ParentGrid];
                [~,locSelectedGrid] = ismember(gridIdSelectedPartsArray,...
                    [gridFromDisplacementArray.Id]);
                xCquad4 = reshape([obj.DisplacementArray(...
                    locSelectedGrid).DisplacedX1],4,[]);
                yCquad4 = reshape([obj.DisplacementArray(...
                    locSelectedGrid).DisplacedX2],4,[]);
                zCquad4 = reshape([obj.DisplacementArray(...
                    locSelectedGrid).DisplacedX3],4,[]);
%                 xCquad4 = cell2mat(arrayfun(@(x)...
%                     vertcat(x.GridArray.DeformedX1),...
%                     cquad4Vector,'UniformOutput',false));
%                 xCquad4 = reshape(xCquad4(:,subcaseNo),4,[]);
%                 yCquad4 = cell2mat(arrayfun(@(x)...
%                     vertcat(x.GridArray.DeformedX2),...
%                     cquad4Vector,'UniformOutput',false));
%                 yCquad4 = reshape(yCquad4(:,subcaseNo),4,[]);
%                 zCquad4 = cell2mat(arrayfun(@(x)...
%                     vertcat(x.GridArray.DeformedX3),...
%                     cquad4Vector,'UniformOutput',false));
%                 zCquad4 = reshape(zCquad4(:,subcaseNo),4,[]);
                % Save centroid coordinates
                cquad4CentroidCoordinateArray =...
                    [mean(xCquad4,1)',...
                    mean(yCquad4,1)',...
                    mean(zCquad4,1)'];
                % Retrieve mean x-normal stress for each element
                meanNormalXCquad4 = horzcat(obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).MeanNormalX);
                % Retrieve mean y-normal stress for each element
                meanNormalYCquad4 = horzcat(obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).MeanNormalY);
                % Retrieve mean shear xy stress for each element
                meanShearXyCquad4 = horzcat(obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).MeanShearXy);
                % Retrieve mean major stress for each element
                meanMajorCquad4 = horzcat(obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).MeanMajor);
                % Retrieve mean minor stress for each element
                meanMinorCquad4 = horzcat(obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).MeanMinor);
                % Retrieve mean von mises stress for each element
                meanMaxShearCquad4 = horzcat(obj.StressInElementArray(...
                    cquad4OfSelectedPartsLogical).MeanMaxShear);
                % Plot all stresses in the corresponding axes
                fill3(normalXAxes,xCquad4,yCquad4,zCquad4,...
                    meanNormalXCquad4*scaleFactor)
                fill3(normalYAxes,xCquad4,yCquad4,zCquad4,...
                    meanNormalYCquad4*scaleFactor)
                fill3(shearXyAxes,xCquad4,yCquad4,zCquad4,...
                    meanShearXyCquad4*scaleFactor)
                fill3(majorAxes,xCquad4,yCquad4,zCquad4,...
                    meanMajorCquad4*scaleFactor)
                fill3(minorAxes,xCquad4,yCquad4,zCquad4,...
                    meanMinorCquad4*scaleFactor)
                fill3(maxShearAxes,xCquad4,yCquad4,zCquad4,...
                    meanMaxShearCquad4*scaleFactor)
            end
            if any(ctria3OfSelectedPartsLogical)
                % If Ctria3 elements are present in the selected parts
                % retrieve deformed coordinates of the grid points
                gridIdSelectedPartsArray = cell2mat(arrayfun(@(x)...
                    vertcat(x.GridArray.Id),[obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).ParentElement],...
                    'UniformOutput',false));
                gridFromDisplacementArray =...
                    [obj.DisplacementArray.ParentGrid];
                [~,locSelectedGrid] = ismember(gridIdSelectedPartsArray,...
                    [gridFromDisplacementArray.Id]);
                xCtria3 = reshape([obj.DisplacementArray(...
                    locSelectedGrid).DisplacedX1],3,[]);
                yCtria3 = reshape([obj.DisplacementArray(...
                    locSelectedGrid).DisplacedX2],3,[]);
                zCtria3 = reshape([obj.DisplacementArray(...
                    locSelectedGrid).DisplacedX3],3,[]);
                % Save centroid coordinates
                ctria3CentroidCoordinateArray =...
                    [mean(xCtria3,1)',...
                    mean(yCtria3,1)',...
                    mean(zCtria3,1)'];
                % Retrieve mean x-normal stress for each element
                meanNormalXCtria3 = horzcat(obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).MeanNormalX);
                % Retrieve mean y-normal stress for each element
                meanNormalYCtria3 = horzcat(obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).MeanNormalY);
                % Retrieve mean shear xy stress for each element
                meanShearXyCtria3 = horzcat(obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).MeanShearXy);
                % Retrieve mean major stress for each element
                meanMajorCtria3 = horzcat(obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).MeanMajor);
                % Retrieve mean minor stress for each element
                meanMinorCtria3 = horzcat(obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).MeanMinor);
                % Retrieve mean von mises stress for each element
                meanMaxShearCtria3 = horzcat(obj.StressInElementArray(...
                    ctria3OfSelectedPartsLogical).MeanMaxShear);
                % Plot all stresses in the corresponding axes
                fill3(normalXAxes,xCtria3,yCtria3,zCtria3,...
                    meanNormalXCtria3*scaleFactor)
                fill3(normalYAxes,xCtria3,yCtria3,zCtria3,...
                    meanNormalYCtria3*scaleFactor)
                fill3(shearXyAxes,xCtria3,yCtria3,zCtria3,...
                    meanShearXyCtria3*scaleFactor)
                fill3(majorAxes,xCtria3,yCtria3,zCtria3,...
                    meanMajorCtria3*scaleFactor)
                fill3(minorAxes,xCtria3,yCtria3,zCtria3,...
                    meanMinorCtria3*scaleFactor)
                fill3(maxShearAxes,xCtria3,yCtria3,zCtria3,...
                    meanMaxShearCtria3*scaleFactor)
            end
            % Retrieve origin coordinates of all elements
            elementsCentroidCoordinateArray =...
                [cquad4CentroidCoordinateArray;...
                ctria3CentroidCoordinateArray];
            %-------------------------------------------------------------%
            % Plot max and min x-normal stresses
            % Retrieve vector with all normal-x stresses
            normalXVector = ...
                [meanNormalXCquad4,meanNormalXCtria3];
            % Find max x-normal stress and index
            [maxNormalX,maxNormalXIndex] = max(normalXVector);
            % Plot position of element with max x-normal stress
            hMax = scatter3(normalXAxes,...
                elementsCentroidCoordinateArray(maxNormalXIndex,1),...
                elementsCentroidCoordinateArray(maxNormalXIndex,2),...
                elementsCentroidCoordinateArray(maxNormalXIndex,3),'mx');
            % Find min x-normal stress and index
            [minNormalX,minNormalXIndex] = min(normalXVector);
            % Plot position of element with min x-normal stress
            hMin = scatter3(normalXAxes,...
                elementsCentroidCoordinateArray(minNormalXIndex,1),...
                elementsCentroidCoordinateArray(minNormalXIndex,2),...
                elementsCentroidCoordinateArray(minNormalXIndex,3),'cx');
            % Sort vector of x-normal stresses from highest to lowest
            % stress
            normalXVector = sort(normalXVector,'descend');
            % Select the highest 1% stresses and take the mean
            highest1PercentNormalX =...
                normalXVector(1:round(length(normalXVector)*0.01));
            meanHighest1PercentNormalX = mean(highest1PercentNormalX);
            % Select the lowest 1% stresses and take the mean
            lowest1PercentNormalX =...
                normalXVector(end-round(length(normalXVector)*0.01):end);
            meanLowest1PercentNormalX = mean(lowest1PercentNormalX);
            % Set the default three-dimensional view
            view(normalXAxes,3)
            % Set axis style
            axis(normalXAxes,'image')
            % Set colorbar
            c = colorbar(normalXAxes);
            c.Label.String = sprintf('Stress, %s',stressUnits);
            % Save handle vector and text array for legend
            plotHandleVector = [hMax,hMin];
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.1f %s)\n',...
                'Mean of highest 1\\%% stresses: %.1f %s'],...
                maxNormalX*scaleFactor,stressUnits,...
                meanHighest1PercentNormalX*scaleFactor,stressUnits),...
                sprintf(['Element undergoing min stress (%.1f %s)\n',...
                'Mean of lowest 1\\%% stresses: %.1f %s'],...
                minNormalX*scaleFactor,stressUnits,...
                meanLowest1PercentNormalX*scaleFactor,stressUnits)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',normalXAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','best');
            makePlotNicer(plotSpecificationStruct)
            %-------------------------------------------------------------%
            % Plot max and min y-normal stresses
            % Retrieve vector with all y-normal stresses
            normalYVector = ...
                [meanNormalYCquad4,meanNormalYCtria3];
            % Find max x-normal stress and index
            [maxNormalY,maxNormalYIndex] = max(normalYVector);
            % Plot position of element with max x-normal stress
            hMax = scatter3(normalYAxes,...
                elementsCentroidCoordinateArray(maxNormalYIndex,1),...
                elementsCentroidCoordinateArray(maxNormalYIndex,2),...
                elementsCentroidCoordinateArray(maxNormalYIndex,3),'mx');
            % Find min x-normal stress and index
            [minNormalY,minNormalYIndex] = min(normalYVector);
            % Plot position of element with min x-normal stress
            hMin = scatter3(normalYAxes,...
                elementsCentroidCoordinateArray(minNormalYIndex,1),...
                elementsCentroidCoordinateArray(minNormalYIndex,2),...
                elementsCentroidCoordinateArray(minNormalYIndex,3),'cx');
            % Sort vector of x-normal stresses from highest to lowest
            % stress
            normalYVector = sort(normalYVector,'descend');
            % Select the highest 1% stresses and take the mean
            highest1PercentNormalY =...
                normalYVector(1:ceil(length(normalYVector)*0.01));
            meanHighest1PercentNormalY = mean(highest1PercentNormalY);
            % Select the lowest 1% stresses and take the mean
            lowest1PercentNormalY =...
                normalYVector(end-ceil(length(normalYVector)*0.01):end);
            meanLowest1PercentNormalY = mean(lowest1PercentNormalY);
            % Set the default three-dimensional view
            view(normalYAxes,3)
            % Set axis style
            axis(normalYAxes,'image')
            % Set colorbar
            c = colorbar(normalYAxes);
            c.Label.String = sprintf('Stress, %s',stressUnits);
            % Save handle vector and text array for legend
            plotHandleVector = [hMax,hMin];
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.1f %s)\n',...
                'Mean of highest 1\\%% stresses: %.1f %s'],...
                maxNormalY*scaleFactor,stressUnits,...
                meanHighest1PercentNormalY*scaleFactor,stressUnits),...
                sprintf(['Element undergoing min stress (%.1f %s)\n',...
                'Mean of lowest 1\\%% stresses: %.1f %s'],...
                minNormalY*scaleFactor,stressUnits,...
                meanLowest1PercentNormalY*scaleFactor,stressUnits)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',normalYAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','best');
            makePlotNicer(plotSpecificationStruct)
            %-------------------------------------------------------------%
            % Plot max and min xy-shear stresses
            % Retrieve vector with all xy-shear stresses
            shearXyVector = ...
                [meanShearXyCquad4,meanShearXyCtria3];
            % Find max xy-shear stress and index
            [maxShearXy,maxShearXyIndex] = max(shearXyVector);
            % Plot position of element with max xy-shear stress
            hMax = scatter3(shearXyAxes,...
                elementsCentroidCoordinateArray(maxShearXyIndex,1),...
                elementsCentroidCoordinateArray(maxShearXyIndex,2),...
                elementsCentroidCoordinateArray(maxShearXyIndex,3),'mx');
            % Find min xy-shear stress and index
            [minShearXy,minShearXyIndex] = min(shearXyVector);
            % Plot position of element with min xy-shear stress
            hMin = scatter3(shearXyAxes,...
                elementsCentroidCoordinateArray(minShearXyIndex,1),...
                elementsCentroidCoordinateArray(minShearXyIndex,2),...
                elementsCentroidCoordinateArray(minShearXyIndex,3),'cx');
            % Sort vector of xy-shear stresses from highest to lowest
            % stress
            shearXyVector = sort(shearXyVector,'descend');
            % Select the highest 1% stresses and take the mean
            highest1PercentShearXy =...
                shearXyVector(1:ceil(length(shearXyVector)*0.01));
            meanHighest1PercentShearXy = mean(highest1PercentShearXy);
            % Select the lowest 1% stresses and take the mean
            lowest1PercentShearXy =...
                shearXyVector(end-ceil(length(shearXyVector)*0.01):end);
            meanLowest1PercentShearXy = mean(lowest1PercentShearXy);
            % Set the default three-dimensional view
            view(shearXyAxes,3)
            % Set axis style
            axis(shearXyAxes,'image')
            % Set colorbar
            c = colorbar(shearXyAxes);
            c.Label.String = sprintf('Stress, %s',stressUnits);
            % Save handle vector and text array for legend
            plotHandleVector = [hMax,hMin];
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.1f %s)\n',...
                'Mean of highest 1\\%% stresses: %.1f %s'],...
                maxShearXy*scaleFactor,stressUnits,...
                meanHighest1PercentShearXy*scaleFactor,stressUnits),...
                sprintf(['Element undergoing min stress (%.1f %s)\n',...
                'Mean of lowest 1\\%% stresses: %.1f %s'],...
                minShearXy*scaleFactor,stressUnits,...
                meanLowest1PercentShearXy*scaleFactor,stressUnits)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',shearXyAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','best');
            makePlotNicer(plotSpecificationStruct)
            %-------------------------------------------------------------%
            % Plot max major stresses
            % Retrieve vector with all major stresses
            majorVector = ...
                [meanMajorCquad4,meanMajorCtria3];
            % Find max major stress and index
            [maxMajor,maxMajorIndex] = max(majorVector);
            % Plot position of element with max major stress
            hMax = scatter3(majorAxes,...
                elementsCentroidCoordinateArray(maxMajorIndex,1),...
                elementsCentroidCoordinateArray(maxMajorIndex,2),...
                elementsCentroidCoordinateArray(maxMajorIndex,3),'mx');
            % Sort vector of major stresses from highest to lowest
            % stress
            majorVector = sort(majorVector,'descend');
            % Select the highest 1% stresses and take the mean
            highest1PercentMajor =...
                majorVector(1:ceil(length(majorVector)*0.01));
            meanHighest1PercentMajor = mean(highest1PercentMajor);
            % Set the default three-dimensional view
            view(majorAxes,3)
            % Set axis style
            axis(majorAxes,'image')
            % Set colorbar
            c = colorbar(majorAxes);
            c.Label.String = sprintf('Stress, %s',stressUnits);
            % Save handle vector and text array for legend
            plotHandleVector = hMax;
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.1f %s)\n',...
                'Mean of highest 1\\%% stresses: %.1f %s'],...
                maxMajor*scaleFactor,stressUnits,...
                meanHighest1PercentMajor*scaleFactor,stressUnits)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',majorAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','best');
            makePlotNicer(plotSpecificationStruct)
            %-------------------------------------------------------------%
            % Plot min minor stresses
            % Retrieve vector with all minor stresses
            minorVector = ...
                [meanMinorCquad4,meanMinorCtria3];
            % Find min minor stress and index
            [minMinor,minMinorIndex] = min(minorVector);
            % Plot position of element with min minor stress
            hMin = scatter3(minorAxes,...
                elementsCentroidCoordinateArray(minMinorIndex,1),...
                elementsCentroidCoordinateArray(minMinorIndex,2),...
                elementsCentroidCoordinateArray(minMinorIndex,3),'cx');
            % Sort vector of minor stresses from highest to lowest
            % stress
            minorVector = sort(minorVector,'descend');
            % Select the lowest 1% stresses and take the mean
            lowest1PercentMinor =...
                minorVector(end-ceil(length(minorVector)*0.01):end);
            meanLowest1PercentMinor = mean(lowest1PercentMinor);
            % Set the default three-dimensional view
            view(minorAxes,3)
            % Set axis style
            axis(minorAxes,'image')
            % Set colorbar
            c = colorbar(minorAxes);
            c.Label.String = sprintf('Stress, %s',stressUnits);
            % Save handle vector and text array for legend
            plotHandleVector = hMin;
            legendTextArray = {...
                sprintf(['Element undergoing min stress (%.1f %s)\n',...
                'Mean of lowest 1\\%% stresses: %.1f %s'],...
                minMinor*scaleFactor,stressUnits,...
                meanLowest1PercentMinor*scaleFactor,stressUnits)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',minorAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','best');
            makePlotNicer(plotSpecificationStruct)
            %-------------------------------------------------------------%
            % Plot max of max shear stresses
            % Retrieve vector with all max shear stresses
            maxShearVector = ...
                [meanMaxShearCquad4,meanMaxShearCtria3];
            % Find max major stress and index
            [maxMaxShear,maxMaxShearIndex] = max(maxShearVector);
            % Plot position of element with max von mises stress
            hMax = scatter3(maxShearAxes,...
                elementsCentroidCoordinateArray(maxMaxShearIndex,1),...
                elementsCentroidCoordinateArray(maxMaxShearIndex,2),...
                elementsCentroidCoordinateArray(maxMaxShearIndex,3),'mx');
            % Sort vector of von mises stresses from highest to lowest
            % stress
            maxShearVector = sort(maxShearVector,'descend');
            % Select the highest 1% stresses and take the mean
            highest1PercentMaxShear =...
                maxShearVector(1:ceil(length(maxShearVector)*0.01));
            meanHighest1PercentMaxShear = mean(highest1PercentMaxShear);
            % Set the default three-dimensional view
            view(maxShearAxes,3)
            % Set axis style
            axis(maxShearAxes,'image')
            % Set colorbar
            c = colorbar(maxShearAxes);
            c.Label.String = sprintf('Stress, %s',stressUnits);
            % Save handle vector and text array for legend
            plotHandleVector = hMax;
            legendTextArray = {...
                sprintf(['Element undergoing max shear stress (%.1f %s)\n',...
                'Mean of highest 1\\%% stresses: %.1f %s'],...
                maxMaxShear*scaleFactor,stressUnits,...
                meanHighest1PercentMaxShear*scaleFactor,stressUnits)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',maxShearAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','best');
            makePlotNicer(plotSpecificationStruct)
        end
        
        %% Plot strains in part array
        function plotStrain(obj,subcaseNo)
            % Create figure and tab group
            figHandle = figure(...
                'Name',sprintf('Strain Plot Subcase %d',subcaseNo),...
                'NumberTitle','off',...
                'units','normalized',...
                'outerposition',[0 0 1 1]);
            pos = get(figHandle,'Position');
            set(figHandle,'PaperPositionMode','Auto',...
                'PaperUnits','Inches',...
                'PaperSize',[pos(3),pos(4)])
            tabGroupHandle = uitabgroup(figHandle);
            % Create tab and axes for each stress type
            normalXTab = uitab(tabGroupHandle,'Title','Normal-x');
            normalXAxes = axes('Parent',normalXTab);
            hold(normalXAxes,'on')
            normalYTab = uitab(tabGroupHandle,'Title','Normal-y');
            normalYAxes = axes('Parent',normalYTab);
            hold(normalYAxes,'on')
            shearXyTab = uitab(tabGroupHandle,'Title','Shear-xy');
            shearXyAxes = axes('Parent',shearXyTab);
            hold(shearXyAxes,'on')
            majorTab = uitab(tabGroupHandle,'Title','Major');
            majorAxes = axes('Parent',majorTab);
            hold(majorAxes,'on')
            minorTab = uitab(tabGroupHandle,'Title','Minor');
            minorAxes = axes('Parent',minorTab);
            hold(minorAxes,'on')
            maxShearTab = uitab(tabGroupHandle,'Title','Max Shear');
            maxShearAxes = axes('Parent',maxShearTab);
            hold(maxShearAxes,'on')
            % Initialize stress variables
            normalXCquad4 = {};
            normalYCquad4 = {};
            shearXyCquad4 = {};
            majorCquad4 = {};
            minorCquad4 = {};
            maxShearCquad4 = {};
            normalXCtria3 = {};
            normalYCtria3 = {};
            shearXyCtria3 = {};
            majorCtria3 = {};
            minorCtria3 = {};
            maxShearCtria3 = {};
            cquad4CentroidCoordinateArray = {};
            ctria3CentroidCoordinateArray = {};
            % Iterate through the object array
            for i = length(obj):-1:1
                % Get all cquad4 and ctria3 elements of current object
                cquad4Vector = obj(i).getAllCquad4Elements;
                ctria3Vector = obj(i).getAllCtria3Elements;
                if ~isempty(cquad4Vector)
                    % If Cquad4 elements are present in current part,
                    % retrieve deformed coordinates of the grid points
                    xCquad4 = cell2mat(arrayfun(@(x)...
                        vertcat(x.GridArray.DeformedX1),...
                        cquad4Vector,'UniformOutput',false));
                    xCquad4 = reshape(xCquad4(:,subcaseNo),4,[]);
                    yCquad4 = cell2mat(arrayfun(@(x)...
                        vertcat(x.GridArray.DeformedX2),...
                        cquad4Vector,'UniformOutput',false));
                    yCquad4 = reshape(yCquad4(:,subcaseNo),4,[]);
                    zCquad4 = cell2mat(arrayfun(@(x)...
                        vertcat(x.GridArray.DeformedX3),...
                        cquad4Vector,'UniformOutput',false));
                    zCquad4 = reshape(zCquad4(:,subcaseNo),4,[]);
                    % Save centroid coordinates
                    cquad4CentroidCoordinateArray{i,1} =...
                        [mean(xCquad4,1)',...
                        mean(yCquad4,1)',...
                        mean(zCquad4,1)'];
                    % Retrieve mean x-normal strain for each element
                    normalXCquad4{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).NormalX,cquad4Vector);
                    % Retrieve mean y-normal strain for each element
                    normalYCquad4{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).NormalY,cquad4Vector);
                    % Retrieve mean shear xy strain for each element
                    shearXyCquad4{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).ShearXy,cquad4Vector);
                    % Retrieve mean major strain for each element
                    majorCquad4{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).Major,cquad4Vector);
                    % Retrieve mean minor strain for each element
                    minorCquad4{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).Minor,cquad4Vector);
                    % Retrieve mean max shear strain for each element
                    maxShearCquad4{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).MaxShear,cquad4Vector);
                    % Plot all strains in the corresponding axes
                    fill3(normalXAxes,xCquad4,yCquad4,zCquad4,...
                        normalXCquad4{i}')
                    fill3(normalYAxes,xCquad4,yCquad4,zCquad4,...
                        normalYCquad4{i}')
                    fill3(shearXyAxes,xCquad4,yCquad4,zCquad4,...
                        shearXyCquad4{i}')
                    fill3(majorAxes,xCquad4,yCquad4,zCquad4,...
                        majorCquad4{i}')
                    fill3(minorAxes,xCquad4,yCquad4,zCquad4,...
                        minorCquad4{i}')
                    fill3(maxShearAxes,xCquad4,yCquad4,zCquad4,...
                        maxShearCquad4{i}')
                end
                if ~isempty(ctria3Vector)
                    % If Ctria3 elements are present in current part,
                    % retrieve deformed coordinates of the grid points
                    xCtria3 = cell2mat(arrayfun(@(x)...
                        vertcat(x.GridArray.DeformedX1),...
                        ctria3Vector,'UniformOutput',false));
                    xCtria3 = reshape(xCtria3(:,subcaseNo),3,[]);
                    yCtria3 = cell2mat(arrayfun(@(x)...
                        vertcat(x.GridArray.DeformedX2),...
                        ctria3Vector,'UniformOutput',false));
                    yCtria3 = reshape(yCtria3(:,subcaseNo),3,[]);
                    zCtria3 = cell2mat(arrayfun(@(x)...
                        vertcat(x.GridArray.DeformedX3),...
                        ctria3Vector,'UniformOutput',false));
                    zCtria3 = reshape(zCtria3(:,subcaseNo),3,[]);
                    % Save centroid coordinates
                    ctria3CentroidCoordinateArray{i,1} =...
                        [mean(xCtria3,1)',...
                        mean(yCtria3,1)',...
                        mean(zCtria3,1)'];
                    % Retrieve mean x-normal strain for each element
                    normalXCtria3{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).NormalX,ctria3Vector);
                    % Retrieve mean y-normal strain for each element
                    normalYCtria3{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).NormalY,ctria3Vector);
                    % Retrieve mean shear xy strain for each element
                    shearXyCtria3{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).ShearXy,ctria3Vector);
                    % Retrieve mean major strain for each element
                    majorCtria3{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).Major,ctria3Vector);
                    % Retrieve mean minor strain for each element
                    minorCtria3{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).Minor,ctria3Vector);
                    % Retrieve mean von mises strain for each element
                    maxShearCtria3{i,1} = arrayfun(@(x)...
                        x.Strain(subcaseNo).MaxShear,ctria3Vector);
                    % Plot all strains in the corresponding axes
                    fill3(normalXAxes,xCtria3,yCtria3,zCtria3,...
                        normalXCtria3{i}')
                    fill3(normalYAxes,xCtria3,yCtria3,zCtria3,...
                        normalYCtria3{i}')
                    fill3(shearXyAxes,xCtria3,yCtria3,zCtria3,...
                        shearXyCtria3{i}')
                    fill3(majorAxes,xCtria3,yCtria3,zCtria3,...
                        majorCtria3{i}')
                    fill3(minorAxes,xCtria3,yCtria3,zCtria3,...
                        minorCtria3{i}')
                    fill3(maxShearAxes,xCtria3,yCtria3,zCtria3,...
                        maxShearCtria3{i}')
                end
            end
            % Retrieve origin coordinates of all elements
            elementsCentroidCoordinateArray = cell2mat(...
                [cquad4CentroidCoordinateArray;...
                ctria3CentroidCoordinateArray]);
            % Plot max and min x-normal strains
            % Retrieve vector with all normal-x strains
            normalXVector = cell2mat(...
                [normalXCquad4;normalXCtria3]);
            % Find max x-normal strain and index
            [maxNormalX,maxNormalXIndex] = max(normalXVector);
            % Plot position of element with max x-normal strain
            hMax = scatter3(normalXAxes,...
                elementsCentroidCoordinateArray(maxNormalXIndex,1),...
                elementsCentroidCoordinateArray(maxNormalXIndex,2),...
                elementsCentroidCoordinateArray(maxNormalXIndex,3),'mx');
            % Find min x-normal strain and index
            [minNormalX,minNormalXIndex] = min(normalXVector);
            % Plot position of element with min x-normal strain
            hMin = scatter3(normalXAxes,...
                elementsCentroidCoordinateArray(minNormalXIndex,1),...
                elementsCentroidCoordinateArray(minNormalXIndex,2),...
                elementsCentroidCoordinateArray(minNormalXIndex,3),'cx');
            % Sort vector of x-normal strains from highest to lowest
            % strain
            normalXVector = sort(normalXVector,'descend');
            % Select the highest 1% strains and take the mean
            highest1PercentNormalX =...
                normalXVector(1:ceil(length(normalXVector)*0.01));
            meanHighest1PercentNormalX = mean(highest1PercentNormalX);
            % Select the lowest 1% strains and take the mean
            lowest1PercentNormalX =...
                normalXVector(end-ceil(length(normalXVector)*0.01):end);
            meanLowest1PercentNormalX = mean(lowest1PercentNormalX);
            % Set the default three-dimensional view
            view(normalXAxes,3)
            % Set axis style
            axis(normalXAxes,'image')
            % Set colorbar
            c = colorbar(normalXAxes);
            c.Label.String = 'Stress [Pa]';
            % Save handle vector and text array for legend
            plotHandleVector = [hMax,hMin];
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.2e Pa)\n',...
                'Mean of highest 1%% stresses: %.2e Pa'],...
                maxNormalX,meanHighest1PercentNormalX),...
                sprintf(['Element undergoing min stress (%.2e Pa)\n',...
                'Mean of lowest 1%% stresses: %.2e Pa'],...
                minNormalX,meanLowest1PercentNormalX)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',normalXAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','SouthWest');
            makePlotNicer(plotSpecificationStruct)
            
            % Plot max and min y-normal strains
            % Retrieve vector with all y-normal strains
            normalYVector = cell2mat(...
                [normalYCquad4;normalYCtria3]);
            % Find max x-normal strain and index
            [maxNormalY,maxNormalYIndex] = max(normalYVector);
            % Plot position of element with max x-normal strain
            hMax = scatter3(normalYAxes,...
                elementsCentroidCoordinateArray(maxNormalYIndex,1),...
                elementsCentroidCoordinateArray(maxNormalYIndex,2),...
                elementsCentroidCoordinateArray(maxNormalYIndex,3),'mx');
            % Find min x-normal strain and index
            [minNormalY,minNormalYIndex] = min(normalYVector);
            % Plot position of element with min x-normal strain
            hMin = scatter3(normalYAxes,...
                elementsCentroidCoordinateArray(minNormalYIndex,1),...
                elementsCentroidCoordinateArray(minNormalYIndex,2),...
                elementsCentroidCoordinateArray(minNormalYIndex,3),'cx');
            % Sort vector of x-normal strains from highest to lowest
            % strain
            normalYVector = sort(normalYVector,'descend');
            % Select the highest 1% strains and take the mean
            highest1PercentNormalY =...
                normalYVector(1:ceil(length(normalYVector)*0.01));
            meanHighest1PercentNormalY = mean(highest1PercentNormalY);
            % Select the lowest 1% strains and take the mean
            lowest1PercentNormalY =...
                normalYVector(end-ceil(length(normalYVector)*0.01):end);
            meanLowest1PercentNormalY = mean(lowest1PercentNormalY);
            % Set the default three-dimensional view
            view(normalYAxes,3)
            % Set axis style
            axis(normalYAxes,'image')
            % Set colorbar
            c = colorbar(normalYAxes);
            c.Label.String = 'Stress [Pa]';
            % Save handle vector and text array for legend
            plotHandleVector = [hMax,hMin];
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.2e Pa)\n',...
                'Mean of highest 1%% stresses: %.2e Pa'],...
                maxNormalY,meanHighest1PercentNormalY),...
                sprintf(['Element undergoing min stress (%.2e Pa)\n',...
                'Mean of lowest 1%% stresses: %.2e Pa'],...
                minNormalY,meanLowest1PercentNormalY)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',normalYAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','SouthWest');
            makePlotNicer(plotSpecificationStruct)
            
            % Plot max and min xy-shear strains
            % Retrieve vector with all xy-shear strains
            shearXyVector = cell2mat(...
                [shearXyCquad4;shearXyCtria3]);
            % Find max xy-shear strain and index
            [maxShearXy,maxShearXyIndex] = max(shearXyVector);
            % Plot position of element with max xy-shear strain
            hMax = scatter3(shearXyAxes,...
                elementsCentroidCoordinateArray(maxShearXyIndex,1),...
                elementsCentroidCoordinateArray(maxShearXyIndex,2),...
                elementsCentroidCoordinateArray(maxShearXyIndex,3),'mx');
            % Find min xy-shear strain and index
            [minShearXy,minShearXyIndex] = min(shearXyVector);
            % Plot position of element with min xy-shear strain
            hMin = scatter3(shearXyAxes,...
                elementsCentroidCoordinateArray(minShearXyIndex,1),...
                elementsCentroidCoordinateArray(minShearXyIndex,2),...
                elementsCentroidCoordinateArray(minShearXyIndex,3),'cx');
            % Sort vector of xy-shear strains from highest to lowest
            % strain
            shearXyVector = sort(shearXyVector,'descend');
            % Select the highest 1% strains and take the mean
            highest1PercentShearXy =...
                shearXyVector(1:ceil(length(shearXyVector)*0.01));
            meanHighest1PercentShearXy = mean(highest1PercentShearXy);
            % Select the lowest 1% strains and take the mean
            lowest1PercentShearXy =...
                shearXyVector(end-ceil(length(shearXyVector)*0.01):end);
            meanLowest1PercentShearXy = mean(lowest1PercentShearXy);
            % Set the default three-dimensional view
            view(shearXyAxes,3)
            % Set axis style
            axis(shearXyAxes,'image')
            % Set colorbar
            c = colorbar(shearXyAxes);
            c.Label.String = 'Stress [Pa]';
            % Save handle vector and text array for legend
            plotHandleVector = [hMax,hMin];
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.2e Pa)\n',...
                'Mean of highest 1%% stresses: %.2e Pa'],...
                maxShearXy,meanHighest1PercentShearXy),...
                sprintf(['Element undergoing min stress (%.2e Pa)\n',...
                'Mean of lowest 1%% stresses: %.2e Pa'],...
                minShearXy,meanLowest1PercentShearXy)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',shearXyAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','SouthWest');
            makePlotNicer(plotSpecificationStruct)
            
            % Plot max major strains
            % Retrieve vector with all major strains
            majorVector = cell2mat(...
                [majorCquad4;majorCtria3]);
            % Find max major strain and index
            [maxMajor,maxMajorIndex] = max(majorVector);
            % Plot position of element with max major strain
            hMax = scatter3(majorAxes,...
                elementsCentroidCoordinateArray(maxMajorIndex,1),...
                elementsCentroidCoordinateArray(maxMajorIndex,2),...
                elementsCentroidCoordinateArray(maxMajorIndex,3),'mx');
            % Sort vector of major strains from highest to lowest
            % strain
            majorVector = sort(majorVector,'descend');
            % Select the highest 1% strains and take the mean
            highest1PercentMajor =...
                majorVector(1:ceil(length(majorVector)*0.01));
            meanHighest1PercentMajor = mean(highest1PercentMajor);
            % Set the default three-dimensional view
            view(majorAxes,3)
            % Set axis style
            axis(majorAxes,'image')
            % Set colorbar
            c = colorbar(majorAxes);
            c.Label.String = 'Stress [Pa]';
            % Save handle vector and text array for legend
            plotHandleVector = hMax;
            legendTextArray = {...
                sprintf(['Element undergoing max stress (%.2e Pa)\n',...
                'Mean of highest 1%% stresses: %.2e Pa'],...
                maxMajor,meanHighest1PercentMajor)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',majorAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','SouthWest');
            makePlotNicer(plotSpecificationStruct)
            
            % Plot min minor strains
            % Retrieve vector with all minor strains
            minorVector = cell2mat(...
                [minorCquad4;minorCtria3]);
            % Find min minor strain and index
            [minMinor,minMinorIndex] = min(minorVector);
            % Plot position of element with min minor strain
            hMin = scatter3(minorAxes,...
                elementsCentroidCoordinateArray(minMinorIndex,1),...
                elementsCentroidCoordinateArray(minMinorIndex,2),...
                elementsCentroidCoordinateArray(minMinorIndex,3),'cx');
            % Sort vector of minor strains from highest to lowest
            % strain
            minorVector = sort(minorVector,'descend');
            % Select the lowest 1% strains and take the mean
            lowest1PercentMinor =...
                minorVector(end-ceil(length(minorVector)*0.01):end);
            meanLowest1PercentMinor = mean(lowest1PercentMinor);
            % Set the default three-dimensional view
            view(minorAxes,3)
            % Set axis style
            axis(minorAxes,'image')
            % Set colorbar
            c = colorbar(minorAxes);
            c.Label.String = 'Stress [Pa]';
            % Save handle vector and text array for legend
            plotHandleVector = hMin;
            legendTextArray = {...
                sprintf(['Element undergoing min stress (%.2e Pa)\n',...
                'Mean of lowest 1%% stresses: %.2e Pa'],...
                minMinor,meanLowest1PercentMinor)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',minorAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','SouthWest');
            makePlotNicer(plotSpecificationStruct)
            
            % Plot max of max shear strains
            % Retrieve vector with all max shear strains
            maxShearVector = cell2mat(...
                [maxShearCquad4;maxShearCtria3]);
            % Find max major strain and index
            [maxMaxShear,maxMaxShearIndex] = max(maxShearVector);
            % Plot position of element with max von mises strain
            hMax = scatter3(maxShearAxes,...
                elementsCentroidCoordinateArray(maxMaxShearIndex,1),...
                elementsCentroidCoordinateArray(maxMaxShearIndex,2),...
                elementsCentroidCoordinateArray(maxMaxShearIndex,3),'mx');
            % Sort vector of von mises strains from highest to lowest
            % strain
            maxShearVector = sort(maxShearVector,'descend');
            % Select the highest 1% strains and take the mean
            highest1PercentMaxShear =...
                maxShearVector(1:ceil(length(maxShearVector)*0.01));
            meanHighest1PercentMaxShear = mean(highest1PercentMaxShear);
            % Set the default three-dimensional view
            view(maxShearAxes,3)
            % Set axis style
            axis(maxShearAxes,'image')
            % Set colorbar
            c = colorbar(maxShearAxes);
            c.Label.String = 'Stress [Pa]';
            % Save handle vector and text array for legend
            plotHandleVector = hMax;
            legendTextArray = {...
                sprintf(['Element undergoing max shear stress (%.2e Pa)\n',...
                'Mean of highest 1%% stresses: %.2e Pa'],...
                maxMaxShear,meanHighest1PercentMaxShear)};
            % Make plot nicer adding title, axis labels and legend
            plotSpecificationStruct = struct('targetAxes',maxShearAxes,...
                'txtXlabel','x [m]',...
                'txtYlabel','y [m]',...
                'txtZlabel','z [m]',...
                'lineHandleVector',plotHandleVector,...
                'legendArray',{legendTextArray},...
                'legendLocation','SouthWest');
            makePlotNicer(plotSpecificationStruct)
        end
    end
end
