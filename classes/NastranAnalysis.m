classdef NastranAnalysis < matlab.mixin.Copyable
    %NastranAnalysis Class for the management of a Nastran analysis.
    %   Detailed explanation goes here
    
    %% Properties
    properties
        Name                % Name of the Nastran analysis
        ExecutiveControl    % NastranExecutiveControl object
        CaseControl         % NastranCaseControl object
        BulkData            % NastranBulkData object
        SubcaseResultArray  % array of NastranSubcaseResult object containing the results from subcases
    end
    
    
    methods
        %% Constructor
        function obj = NastranAnalysis(nastranAnalysisStruct)
            %NastranAnalysis Construct an instance of this class
            
            % If number of input arguments is not zero then initialize the
            % object arr    ay with the size of the input structure
            if nargin ~= 0
                [m,n] = size(nastranAnalysisStruct);
                obj(m,n) = NastranAnalysis;
                
                % Iterate through the elements of the input structure
                for i = m:-1:1
                    for j = n:-1:1
                        if isfield(nastranAnalysisStruct,'name')
                            obj(i,j).Name =...
                                nastranAnalysisStruct(i,j).name;
                        end
                        if isfield(nastranAnalysisStruct,...
                                'executiveControl')
                            obj(i,j).ExecutiveControl =...
                                nastranAnalysisStruct(i,...
                                j).executiveControl;
                        end
                        if isfield(nastranAnalysisStruct,'caseControl')
                            obj(i,j).CaseControl =...
                                nastranAnalysisStruct(i,j).caseControl;
                        end
                        if isfield(nastranAnalysisStruct,'bulkData')
                            obj(i,j).BulkData =...
                                nastranAnalysisStruct(i,j).bulkData;
                        end
                    end
                end
            end
        end
        
        %% CaseControl set method
        function set.CaseControl(obj,caseControl)
            obj.CaseControl = caseControl;
            % Assign the current analysis object as parent of the case
            % control object in input
            obj.CaseControl.ParentAnalysis = obj;
        end
        
        %% SubcaseResultArray set method
        function set.SubcaseResultArray(obj,subcaseResultArray)
            obj.SubcaseResultArray = subcaseResultArray;
            % Assign the current analysis object as parent of the subcase
            % result object in input
            parentAnalysisArray = num2cell(repmat(obj,...
                size(subcaseResultArray,1),size(subcaseResultArray,2)));
            [obj.SubcaseResultArray.ParentAnalysis] =...
                parentAnalysisArray{:};
        end
        
        %% Apply additional load cases
        function applyStaticAeroelasticLoadCase(obj,mach,...
                dynamicPressure,independentAestatVector,...
                trimmingConstraintVector,dependentAestatVector)
            %applyStaticAeroelasticLoadCase Add one new load case
            %specifying constraints for aeroelastic trim variables.
            %   applyStaticAeroelasticLoadCase(obj,mach,...
            %   dynamicPressure,independentAestatVector,...
            %   trimmingConstraintVector,dependentAestatVector) appends a
            %   Trim object to the TrimArray property of the BulkData
            %   object and a NastranSubcase object to the SubcaseVector
            %   property of the CaseControl object. mach and 
            %   dynamicPressure are scalars. independentAestatVector
            %   and dependentAestatVector include Aestat objects defining
            %   repsectively the constrained and free trim parameters. Both
            %   are vectors of Aestat objects. trimmingConstraintVector
            %   includes the values of the constrained parameter and it is
            %   a vector.
            % Assemble vector of Aestat objects
            if nargin==6
                % If dependent Aestat objects are given in input then
                % concatenate independent and dependent Aestat objects
                aestatVector = [independentAestatVector;...
                    dependentAestatVector];
            else
                % Otherwise take only independent Aestat objects
                aestatVector = independentAestatVector;
            end
            % Check whether any of the input Aestat objects is missing from
            % the NastranBulkData object
            [~,missingAestatIndexVector,~] =...
                setxor(aestatVector,obj.BulkData.Aestat);
            % Generate new Aestat objects in the NastranBulkData object if 
            % necessary
            for i=1:length(missingAestatIndexVector)
                obj.BulkData.Aestat(end+1) =...
                    aestatVector(missingAestatIndexVector(i));
            end
            % Create input structure for Trim object
            trimStruct = struct(...
                'sid',obj.BulkData.LastSetId.addId,...
                'mach',mach,...
                'q',dynamicPressure,...
                'labeli',aestatVector.Label,...
                'uxi',trimmingConstraintVector);
            % Generate Trim object
            obj.BulkData.Trim(end+1) = Trim(trimStruct);
            % Update case control
            obj.CaseControl.SubcaseVector(end+1) =...
                NastranSubcase(struct(...
                'trim',obj.BulkData.Trim(end)));
        end
        
        %% Run analysis and load results
        function runAndLoadResults(obj,nastranExecutablePath)
            % Save current directory
            mainDirectory = cd;
            % Generate folder name for Nastran analysis
            folderPath = [mainDirectory,filesep,...
                sprintf('%sSol%d',obj.Name,obj.ExecutiveControl.Sol)];
            if exist(folderPath,'dir')
                % If folder with that name already exists, then erase it
                rmdir(folderPath,'s')
            end
            % Make new folder and make it working directory
            mkdir(folderPath)
            cd(folderPath)
            % Write .bdf file
            bdfFileName = obj.write2Bdf;
            % Generate f06 file name
            f06FileName = [bdfFileName(1:end-3),'f06'];
            % Memory option
            memory = 'mem=7gb';
            % Execute Nastran
            fprintf('Starting Nastran for input file %s.\n',...
                bdfFileName)
            system([nastranExecutablePath,' ',bdfFileName,' ',memory]);
            pause(5)
            % Define a file extension in order to check whether Nastran is
            % running
            isRunningFileExtension = '*.rcf';
            % Initialize a Nastran running flag
            isRunningFlag = true;
            % Check every two seconds whether Nastran is still running
            while isRunningFlag
                if ~isempty(dir(isRunningFileExtension))
                    pause(1)
                else
                    isRunningFlag = false;
                end
            end
            % When Nastran is done, display it
            fprintf('Nastran done.\n')
            % Check for fatal errors
            fileText = fileread(f06FileName);
            if ~contains(fileText,'FATAL')
                fprintf('Nastran executed without fatal errors.\n')
            else
                fprintf('Nastran terminated because of a fatal error.\n')
                cd(mainDirectory)
                return
            end
            % Load results from .f06 file
            obj.loadF06Results(f06FileName)
            % Go back to initial directory
            cd(mainDirectory)
        end
        
        %% Write .bdf file
        function bdfFileName = write2Bdf(obj)
            % Generate file name of .bdf file
            bdfFileName = sprintf('%sSol%d.bdf',obj.Name,...
                obj.ExecutiveControl.Sol);
            % Open file
            fileId = fopen(bdfFileName,'w');
            % Write NastranExecutiveControl, NastranCaseConstrol and
            % NastranBulkData objects to .bdf file
            obj.ExecutiveControl.write2Bdf(fileId);
            obj.CaseControl.write2Bdf(fileId);
            obj.BulkData.write2Bdf(fileId);
            % Close file
            fclose(fileId);
        end
        
        %% Load results from .f06 file
        function loadF06Results(obj,f06FileName)
            % Generate a vector of empty NastranSubcaseResults object
            if isempty(obj.CaseControl.SubcaseArray)
                noSubcases = 1;
            else
                noSubcases = length(obj.CaseControl.SubcaseArray);
            end
            obj.SubcaseResultArray = NastranSubcaseResult(struct(...
                'subcaseNo',num2cell(1:noSubcases)));
            % Generate array of Grid objects sorted by id
            [~,I] = sort([obj.BulkData.GridArray.Id]);
            sortedGridArray = obj.BulkData.GridArray(I);
            % Generate array of Cquad4 objects sorted by id
            cquad4Array = obj.BulkData.getAllCquad4Elements;
            [~,I] = sort([cquad4Array.Eid]);
            sortedCquad4Array = cquad4Array(I);
            % Generate array of Ctria3 objects sorted by id
            ctria3Array = obj.BulkData.getAllCtria3Elements;
            [~,I] = sort([ctria3Array.Eid]);
            sortedCtria3Array = ctria3Array(I);
            % Open file
            fileId = fopen(f06FileName,'rt');
            % Read the entire .f06 file
            fileLinesArray = textscan(fileId,'%s','delimiter','\n');
            % Close file
            fclose(fileId);
            % Search for pages end
            endPageIndexVector = find(cellfun(@(x) ~isempty(x),strfind(...
                fileLinesArray{1},upper(obj.CaseControl.Title))));
            %-------------------------------------------------------------%
            % Search for real eigenvalues section
            realEigenvaluesIndexVector = find(strcmp(fileLinesArray{1},...
                'R E A L   E I G E N V A L U E S'));
            realEigenvectorIndexVector = find(cellfun(@(x) ~isempty(x),...
                strfind(fileLinesArray{1},...
                'R E A L   E I G E N V E C T O R')));
            if ~isempty(realEigenvaluesIndexVector)
                fprintf('Reading real eigenvalues from .f06 file.\n')
                % If real eigenvalues output is present in the .f06 file,
                % retrieve start and end line of each real eigenvalues
                % table
                startLineVector = realEigenvaluesIndexVector+3;
                endLineVector = endPageIndexVector(find(...
                    endPageIndexVector>startLineVector(1),...
                    length(realEigenvaluesIndexVector)))-1;
                % For each real eigenvalue table retrieve the subcase
                % nunmber
                if noSubcases>1
                    subcaseLineVector = realEigenvaluesIndexVector-2;
                    eigenvalueSubcaseIndexVector = cellfun(@(x)...
                        sscanf(x,'%*d %*s %d'),...
                        fileLinesArray{1}(subcaseLineVector));
                else
                    eigenvalueSubcaseIndexVector = 1;
                end
                % Retrieve data from each real eigenvalue table
                realEigenvaluesArray = arrayfun(@(x) cell2mat(cellfun(...
                    @(y) sscanf(y,'%d %d %f %f %f %f %f')',...
                    fileLinesArray{1}(startLineVector(x):...
                    endLineVector(x)),'UniformOutput',false)),...
                    1:length(startLineVector),'UniformOutput',false);
                if ~isempty(realEigenvectorIndexVector)
                    % Read eigenvectors data if present
                    % Retrieve start and and line from eigenvector of each
                    % eigenvalue
                    eigenvectorStartLineArray = arrayfun(@(x)...
                        realEigenvectorIndexVector(find(...
                        realEigenvectorIndexVector>...
                        startLineVector(x),1):find(...
                        realEigenvectorIndexVector>...
                        startLineVector(x),1)+...
                        size(realEigenvaluesArray{x},1)-1)+3,...
                        1:length(startLineVector),'UniformOutput',false);
                    eigenvectorEndLineVector = cellfun(@(x)...
                        endPageIndexVector(find(endPageIndexVector>x(1),...
                        length(x)))-1,eigenvectorStartLineArray,...
                        'UniformOutput',false);
                    % Retrieve the displacement array for all grid points
                    eigenvectorDataArray = arrayfun(@(x) arrayfun(@(y)...
                        cell2mat(cellfun(@(z)...
                        sscanf(z,'%d %*s %f %f %f %f %f %f')',...
                        fileLinesArray{1}(...
                        eigenvectorStartLineArray{x}(y):...
                        eigenvectorEndLineVector{x}(y)),...
                        'UniformOutput',false)),...
                        1:length(eigenvectorStartLineArray{x}),...
                        'UniformOutput',false),...
                        1:length(eigenvectorStartLineArray),...
                        'UniformOutput',false);
                    % Retrieve vector of Grid object sorted by id
                    %                     [~,locationGridIdVector] = ismember(...
                    %                         sort([obj.BulkData.GridArray.Id]),...
                    %                         [obj.BulkData.GridArray.Id]);
                    %                     sortedGridVector =...
                    %                         obj.BulkData.GridArray(locationGridIdVector);
                    % Generate a cell array with elements corresponding to
                    % the different eigenvalue analysis subcases. Within
                    % each element another cell array is generated, with
                    % a NastranDisplacement object array (corresponding to
                    % all grid points) in each cell
                    eigenvectorArray = cellfun(@(x) cellfun(@(y)...
                        NastranDisplacement(struct(...
                        'parentGrid',num2cell(sortedGridArray),...
                        't1',num2cell(y(:,2)),...
                        't2',num2cell(y(:,3)),...
                        't3',num2cell(y(:,4)),...
                        'r1',num2cell(y(:,5)),...
                        'r2',num2cell(y(:,6)),...
                        'r3',num2cell(y(:,7)))),...
                        x,'UniformOutput',false),...
                        eigenvectorDataArray,'UniformOutput',false);
                    % Assign an array of NastranEigenvalue objects to each
                    % subcase involving an eigenvalue analysis
                    for i=1:length(eigenvalueSubcaseIndexVector)
                        obj.SubcaseResultArray(...
                            eigenvalueSubcaseIndexVector(i)...
                            ).EigenvalueArray = NastranEigenvalue(...
                            struct('modeNo',...
                            num2cell(realEigenvaluesArray{i}(:,1)),...
                            'extractionOrder',...
                            num2cell(realEigenvaluesArray{i}(:,2)),...
                            'eigenvalue',...
                            num2cell(realEigenvaluesArray{i}(:,3)),...
                            'radians',...
                            num2cell(realEigenvaluesArray{i}(:,4)),...
                            'cycles',...
                            num2cell(realEigenvaluesArray{i}(:,5)),...
                            'generalizedMass',...
                            num2cell(realEigenvaluesArray{i}(:,6)),...
                            'generalizedStiffness',...
                            num2cell(realEigenvaluesArray{i}(:,7)),...
                            'eigenvectorArray',eigenvectorArray{i}'));
                    end
                else
                    % If eigenvectors data is not present then don't
                    % include it for the generation of the
                    % NastranEigenvalue object
                    for i=1:length(eigenvalueSubcaseIndexVector)
                        obj.SubcaseResultArray(eigenvalueSubcaseIndexVector(i)...
                            ).EigenvalueArray = NastranEigenvalue(...
                            struct('modeNo',...
                            num2cell(realEigenvaluesArray{i}(:,1)'),...
                            'extractionOrder',...
                            num2cell(realEigenvaluesArray{i}(:,2)'),...
                            'eigenvalue',...
                            num2cell(realEigenvaluesArray{i}(:,3)'),...
                            'radians',...
                            num2cell(realEigenvaluesArray{i}(:,4)'),...
                            'cycles',...
                            num2cell(realEigenvaluesArray{i}(:,5)'),...
                            'generalizedMass',...
                            num2cell(realEigenvaluesArray{i}(:,6)'),...
                            'generalizedStiffness',...
                            num2cell(realEigenvaluesArray{i}(:,7)')));
                    end
                end
                fprintf('Real eigenvalues read.\n')
            end
            %-------------------------------------------------------------%
            % Search for structural monitor point displacements
            % Find incipit lines of all monitor points
            structuralMonitorPointIndexVector = find(contains(...
                fileLinesArray{1},['S T R U C T U R A L   M O N I T O ',...
                'R   P O I N T   D I S P L A C E M E N T S']));
            if ~isempty(structuralMonitorPointIndexVector)
                fprintf(['Reading structural monitor point ',...
                    'displacements from .f06 file.\n'])
                % Distinguish between static and dynamic monitor point
                % integrated loads
                staticLogicalVector = contains(fileLinesArray{1}(...
                        structuralMonitorPointIndexVector-2),'SUBCASE');
                    % Read static monitor point integrated loads
                    if any(staticLogicalVector)
                        % Find corresponding subcase number
                        subcaseNoVector = arrayfun(@(x) sscanf(...
                            fileLinesArray{1}{x-2},'%*d SUBCASE %d'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector));
                        % Find names and component of monitor points
                        pointInfo1Array = arrayfun(@(x) textscan(...
                            fileLinesArray{1}{x+7},...
                            'MONITOR POINT NAME = %s COMPONENT = %s'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        % Find labels of monitor points
                        pointLabelArray = arrayfun(@(x) textscan(...
                            strtrim(fileLinesArray{1}{x+8}),...
                            'LABEL = %s','Delimiter','\r'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        pointLabelArray = cellfun(@(x) x{1}{1},...
                            pointLabelArray,'UniformOutput',false);
                        % Retrieve information on the points of current subcase
                        pointInfo2Array = arrayfun(@(x)...
                            sscanf(fileLinesArray{1}{x+9},...
                            '%*s = %d %*s = %f %*s = %f %*s = %f %*s = %d'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        % Retrieve the integrated loads for all monitor points
                        % of current subcase
                        displacementArray = arrayfun(@(x) cell2mat(...
                            cellfun(@(y) sscanf(y,'%*s %f')',...
                            fileLinesArray{1}(x+13:x+18),...
                            'UniformOutput',false)),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        % Iterate through the subcases and assign
                        % NastranMonitorPointIntegratedLoads objects to the
                        % StructuralMonitorPointIntegratedLoadsArray 
                        % property of the subcase result
                        uniqueSubcaseVector = unique(subcaseNoVector);
                        for s=length(uniqueSubcaseVector):-1:1
                            % Find indices corresponding to current subcase
                            subcaseLogicalVector =...
                                subcaseNoVector == uniqueSubcaseVector(s);
                            % Generate NastranMonitorPointIntegratedLoads
                            % objects for current subcase
                            obj.SubcaseResultArray(uniqueSubcaseVector(s)...
                                ).StructuralMonitorPointDisplacementsArray =...
                                NastranMonitorPointDisplacement(struct(...
                                'monitorPointName',cellfun(@(x) x{1}{1},...
                                pointInfo1Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'component',cellfun(@(x) x{2}{1},...
                                pointInfo1Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'label',pointLabelArray(subcaseLogicalVector),...
                                'cp',cellfun(@(x) x(1),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'x',cellfun(@(x) x(2),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'y',cellfun(@(x) x(3),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'z',cellfun(@(x) x(4),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'cd',cellfun(@(x) x(5),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                't1',cellfun(@(x) x(1),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                't2',cellfun(@(x) x(2),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                't3',cellfun(@(x) x(3),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'r1',cellfun(@(x) x(4),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'r2',cellfun(@(x) x(5),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'r3',cellfun(@(x) x(6),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false)));
                        end
                    end
                    % Read dynamic monitor point integrated loads
                    dynamicLogicalVector = ~staticLogicalVector;
                    if any(dynamicLogicalVector)
                        % Find number of time steps
                        % Find indices of lines where the tables of the
                        % structural monitor point displacements end
                        monitorPointEndIndexVector = arrayfun(@(x)...
                            endPageIndexVector(find(...
                            endPageIndexVector>x,1)),...
                            structuralMonitorPointIndexVector);
                        % Obtain the number of time steps taking the
                        % difference between the end and the start of the
                        % table
                        noTimeSteps = monitorPointEndIndexVector-...
                            structuralMonitorPointIndexVector-9;
                        % Read monitor point name, component and subcase no
                        pointInfo1Array = arrayfun(@(x) textscan(...
                            fileLinesArray{1}{x+2},...
                            'MONITOR POINT NAME = %s COMPONENT = %s %*s SUBCASE NO. %d'),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        % Read monitor point label
                        pointLabelArray = arrayfun(@(x) textscan(...
                            strtrim(fileLinesArray{1}{x+3}),...
                            'LABEL = %s','Delimiter','\r'),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        pointLabelArray = cellfun(@(x) x{1}{1},...
                            pointLabelArray,'UniformOutput',false);
                        % Read monitor point coordinate system and xyz
                        % coordinates
                        pointInfo2Array = arrayfun(@(x)...
                            sscanf(fileLinesArray{1}{x+4},...
                            '%*s = %d %*s = %f %*s = %f %*s = %f %*s = %d'),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        % Retrieve the integrated loads for all monitor points
                        % of current subcase
                        displacementArray = arrayfun(@(x) cell2mat(...
                            cellfun(@(y) sscanf(y,'%f %f %f %f %f %f %f')',...
                            fileLinesArray{1}(x+8:x+8+noTimeSteps),...
                            'UniformOutput',false)),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        % Iterate through the subcases and assign
                        % NastranMonitorPointIntegratedLoads objects to the
                        % StructuralMonitorPointIntegratedLoadsArray property of
                        % the subcase result
                        subcaseNoVector = cellfun(@(x) x{3},...
                            pointInfo1Array);
                        uniqueSubcaseVector = unique(subcaseNoVector);
                        for s=length(uniqueSubcaseVector):-1:1
                            % Find indices corresponding to current subcase
                            subcaseLogicalVector =...
                                subcaseNoVector == uniqueSubcaseVector(s);
                            % Generate NastranMonitorPointIntegratedLoads
                            % objects for current subcase
                            obj.SubcaseResultArray(uniqueSubcaseVector(s)...
                                ).StructuralMonitorPointDisplacementsArray =...
                                NastranMonitorPointDisplacement(struct(...
                                'monitorPointName',cellfun(@(x) x{1}{1},...
                                pointInfo1Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'component',cellfun(@(x) x{2}{1},...
                                pointInfo1Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'label',pointLabelArray(subcaseLogicalVector),...
                                'cp',cellfun(@(x) x(1),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'x',cellfun(@(x) x(2),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'y',cellfun(@(x) x(3),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'z',cellfun(@(x) x(4),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'cd',cellfun(@(x) x(5),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'time',cellfun(@(x) x(:,1),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                't1',cellfun(@(x) x(:,2),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                't2',cellfun(@(x) x(:,3),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                't3',cellfun(@(x) x(:,4),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'r1',cellfun(@(x) x(:,5),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'r2',cellfun(@(x) x(:,6),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'r3',cellfun(@(x) x(:,7),...
                                displacementArray(subcaseLogicalVector),...
                                'UniformOutput',false)));
                        end
                    end
                fprintf(['Structural monitor point integrated loads ',...
                    'read.\n'])
            end
            %-------------------------------------------------------------%
            % Search for structural monitor point integrated loads
            % Find incipit lines of all monitor points
            structuralMonitorPointIndexVector = find(contains(...
                fileLinesArray{1},['S T R U C T U R A L   M O N I T O ',...
                'R   P O I N T   I N T E G R A T E D   L O A D S']));
            if ~isempty(structuralMonitorPointIndexVector)
                fprintf(['Reading structural monitor point integrated ',...
                    'loads from .f06 file.\n'])
                % Distinguish between static and dynamic monitor point
                % integrated loads
                staticLogicalVector = contains(fileLinesArray{1}(...
                        structuralMonitorPointIndexVector-2),'SUBCASE');
                    % Read static monitor point integrated loads
                    if any(staticLogicalVector)
                        % Find corresponding subcase number
                        subcaseNoVector = arrayfun(@(x) sscanf(...
                            fileLinesArray{1}{x-2},'%*d SUBCASE %d'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector));
                        % Find names and labels of all monitor points
                        pointNameArray = arrayfun(@(x) sscanf(...
                            fileLinesArray{1}{x+7},...
                            'MONITOR POINT NAME = %s'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        pointLabelArray = arrayfun(@(x) textscan(...
                            strtrim(fileLinesArray{1}{x+8}),...
                            'LABEL = %s','Delimiter','\r'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        pointLabelArray = cellfun(@(x) x{1}{1},...
                            pointLabelArray,'UniformOutput',false);
                        % Retrieve information on the points of current subcase
                        pointInfoArray = arrayfun(@(x)...
                            sscanf(fileLinesArray{1}{x+9},...
                            '%*s = %d %*s = %f %*s = %f %*s = %f %*s = %d'),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        % Retrieve the integrated loads for all monitor points
                        % of current subcase
                        integratedLoadsArray = arrayfun(@(x) cell2mat(...
                            cellfun(@(y) sscanf(y,'%*s %f %f %f %f')',...
                            fileLinesArray{1}(x+13:x+18),...
                            'UniformOutput',false)),...
                            structuralMonitorPointIndexVector(...
                            staticLogicalVector),...
                            'UniformOutput',false);
                        % Iterate through the subcases and assign
                        % NastranMonitorPointIntegratedLoads objects to the
                        % StructuralMonitorPointIntegratedLoadsArray property of
                        % the subcase result
                        uniqueSubcaseVector = unique(subcaseNoVector);
                        for s=length(uniqueSubcaseVector):-1:1
                            % Find indices corresponding to current subcase
                            subcaseLogicalVector =...
                                subcaseNoVector == uniqueSubcaseVector(s);
                            % Generate NastranMonitorPointIntegratedLoads
                            % objects for current subcase
                            obj.SubcaseResultArray(uniqueSubcaseVector(s)...
                                ).StructuralMonitorPointIntegratedLoadsArray =...
                                NastranMonitorPointIntegratedLoads(struct(...
                                'monitorPointName',...
                                pointNameArray(subcaseLogicalVector),...
                                'label',pointLabelArray(subcaseLogicalVector),...
                                'cp',cellfun(@(x) x(1),...
                                pointInfoArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'x',cellfun(@(x) x(2),...
                                pointInfoArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'y',cellfun(@(x) x(3),...
                                pointInfoArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'z',cellfun(@(x) x(4),...
                                pointInfoArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'cd',cellfun(@(x) x(5),...
                                pointInfoArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'rigidAir',cellfun(@(x) x(:,1),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'elasticRestrained',cellfun(@(x) x(:,2),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'rigidApplied',cellfun(@(x) x(:,3),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'restrainedApplied',cellfun(@(x) x(:,4),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false)));
                        end
                    end
                    % Read dynamic monitor point integrated loads
                    dynamicLogicalVector = ~staticLogicalVector;
                    if any(dynamicLogicalVector)
                        % Find number of time steps
                        noTimeSteps = diff(structuralMonitorPointIndexVector(...
                            dynamicLogicalVector));
                        noTimeSteps = noTimeSteps(1);
                        % Read monitor point name, component and subcase no
                        pointInfo1Array = arrayfun(@(x) textscan(...
                            fileLinesArray{1}{x+2},...
                            'MONITOR POINT NAME = %s COMPONENT = %s %*s SUBCASE NO. %d'),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        % Read monitor point label
                        pointLabelArray = arrayfun(@(x) textscan(...
                            strtrim(fileLinesArray{1}{x+3}),...
                            'LABEL = %s','Delimiter','\r'),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        pointLabelArray = cellfun(@(x) x{1}{1},...
                            pointLabelArray,'UniformOutput',false);
                        % Read monitor point coordinate system and xyz
                        % coordinates
                        pointInfo2Array = arrayfun(@(x)...
                            sscanf(fileLinesArray{1}{x+4},...
                            '%*s = %d %*s = %f %*s = %f %*s = %f %*s = %d'),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        % Retrieve the integrated loads for all monitor points
                        % of current subcase
                        integratedLoadsArray = arrayfun(@(x) cell2mat(...
                            cellfun(@(y) sscanf(y,'%f %f %f %f %f %f')',...
                            fileLinesArray{1}(x+9:x+noTimeSteps-5),...
                            'UniformOutput',false)),...
                            structuralMonitorPointIndexVector(...
                            dynamicLogicalVector),...
                            'UniformOutput',false);
                        % Iterate through the subcases and assign
                        % NastranMonitorPointIntegratedLoads objects to the
                        % StructuralMonitorPointIntegratedLoadsArray property of
                        % the subcase result
                        subcaseNoVector = cellfun(@(x) x{3},...
                            pointInfo1Array);
                        uniqueSubcaseVector = unique(subcaseNoVector);
                        for s=length(uniqueSubcaseVector):-1:1
                            % Find indices corresponding to current subcase
                            subcaseLogicalVector =...
                                subcaseNoVector == uniqueSubcaseVector(s);
                            % Generate NastranMonitorPointIntegratedLoads
                            % objects for current subcase
                            obj.SubcaseResultArray(uniqueSubcaseVector(s)...
                                ).StructuralMonitorPointIntegratedLoadsArray =...
                                NastranMonitorPointIntegratedLoads(struct(...
                                'monitorPointName',cellfun(@(x) x{1}{1},...
                                pointInfo1Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'component',cellfun(@(x) x{2}{1},...
                                pointInfo1Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'label',pointLabelArray(subcaseLogicalVector),...
                                'cp',cellfun(@(x) x(1),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'x',cellfun(@(x) x(2),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'y',cellfun(@(x) x(3),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'z',cellfun(@(x) x(4),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'cd',cellfun(@(x) x(5),...
                                pointInfo2Array(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'timeStep',cellfun(@(x) x(:,1),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'inertial',cellfun(@(x) x(:,2),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'flexibleIncrement',cellfun(@(x) x(:,3),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'gust',cellfun(@(x) x(:,4),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'totalAero',cellfun(@(x) x(:,5),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false),...
                                'total',cellfun(@(x) x(:,6),...
                                integratedLoadsArray(subcaseLogicalVector),...
                                'UniformOutput',false)));
                        end
                    end
                fprintf(['Structural monitor point integrated loads ',...
                    'read.\n'])
            end
            %-------------------------------------------------------------%
            % Search for aerodynamic monitor point integrated loads
            % Find incipit lines of all monitor points
            aerodynamicMonitorPointIndexVector = find(contains(...
                fileLinesArray{1},['A E R O D Y N A M I C   M O N I T ',...
                'O R   P O I N T   I N T E G R A T E D   L O A D S']));
            if ~isempty(aerodynamicMonitorPointIndexVector)
                fprintf(['Reading structural monitor point integrated ',...
                    'loads from .f06 file.\n'])
                % Distinguish between static and dynamic monitor point
                % integrated loads
                staticLogicalVector = contains(fileLinesArray{1}(...
                    aerodynamicMonitorPointIndexVector-2),'SUBCASE');
                % Read static monitor point integrated loads
                if any(staticLogicalVector)
                    % Find corresponding subcase number
                    subcaseNoVector = arrayfun(@(x) sscanf(...
                        fileLinesArray{1}{x-2},'%*d SUBCASE %d'),...
                        aerodynamicMonitorPointIndexVector(...
                        staticLogicalVector));
                    % Find names and labels of all monitor points
                    pointNameArray = arrayfun(@(x) sscanf(...
                        fileLinesArray{1}{x+7},...
                        'MONITOR POINT NAME = %s'),...
                        aerodynamicMonitorPointIndexVector(...
                        staticLogicalVector),...
                        'UniformOutput',false);
                    pointLabelArray = arrayfun(@(x) textscan(...
                        strtrim(fileLinesArray{1}{x+8}),...
                        'LABEL = %s','Delimiter','\r'),...
                        aerodynamicMonitorPointIndexVector(...
                        staticLogicalVector),...
                        'UniformOutput',false);
                    pointLabelArray = cellfun(@(x) x{1}{1},...
                        pointLabelArray,'UniformOutput',false);
                    % Retrieve information on the points of current subcase
                    pointInfoArray = arrayfun(@(x)...
                        sscanf(fileLinesArray{1}{x+9},...
                        '%*s = %d %*s = %f %*s = %f %*s = %f %*s = %d'),...
                        aerodynamicMonitorPointIndexVector(...
                        staticLogicalVector),...
                        'UniformOutput',false);
                    % Retrieve the integrated loads for all monitor points
                    % of current subcase
                    integratedLoadsArray = arrayfun(@(x) cell2mat(...
                        cellfun(@(y) sscanf(y,'%*s %f %f')',...
                        fileLinesArray{1}(x+13:x+18),...
                        'UniformOutput',false)),...
                        aerodynamicMonitorPointIndexVector(...
                        staticLogicalVector),...
                        'UniformOutput',false);
                    % Iterate through the subcases and assign
                    % NastranMonitorPointIntegratedLoads objects to the
                    % StructuralMonitorPointIntegratedLoadsArray property of
                    % the subcase result
                    uniqueSubcaseVector = unique(subcaseNoVector);
                    for s=length(uniqueSubcaseVector):-1:1
                        % Find indices corresponding to current subcase
                        subcaseLogicalVector =...
                            subcaseNoVector == uniqueSubcaseVector(s);
                        % Generate NastranMonitorPointIntegratedLoads
                        % objects for current subcase
                        obj.SubcaseResultArray(uniqueSubcaseVector(s)...
                            ).AerodynamicMonitorPointIntegratedLoadsArray =...
                            NastranMonitorPointIntegratedLoads(struct(...
                            'monitorPointName',...
                            pointNameArray(subcaseLogicalVector),...
                            'label',pointLabelArray(subcaseLogicalVector),...
                            'cp',cellfun(@(x) x(1),...
                            pointInfoArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'x',cellfun(@(x) x(2),...
                            pointInfoArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'y',cellfun(@(x) x(3),...
                            pointInfoArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'z',cellfun(@(x) x(4),...
                            pointInfoArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'cd',cellfun(@(x) x(5),...
                            pointInfoArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'rigidAir',cellfun(@(x) x(:,1),...
                            integratedLoadsArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'elasticRestrained',cellfun(@(x) x(:,2),...
                            integratedLoadsArray(subcaseLogicalVector),...
                            'UniformOutput',false)));
                    end
                end
                % Read dynamic monitor point integrated loads
                dynamicLogicalVector = ~staticLogicalVector;
                if any(dynamicLogicalVector)
                    % Find number of time steps
                    noTimeSteps = diff(aerodynamicMonitorPointIndexVector(...
                        dynamicLogicalVector));
                    noTimeSteps = noTimeSteps(1);
                    % Read monitor point name, component and subcase no
                    pointInfo1Array = arrayfun(@(x) textscan(...
                        fileLinesArray{1}{x+2},...
                        'MONITOR POINT NAME = %s COMPONENT = %s %*s SUBCASE NO. %d'),...
                        aerodynamicMonitorPointIndexVector(...
                        dynamicLogicalVector),...
                        'UniformOutput',false);
                    % Read monitor point label
                    pointLabelArray = arrayfun(@(x) textscan(...
                        strtrim(fileLinesArray{1}{x+3}),...
                        'LABEL = %s','Delimiter','\r'),...
                        aerodynamicMonitorPointIndexVector(...
                        dynamicLogicalVector),...
                        'UniformOutput',false);
                    pointLabelArray = cellfun(@(x) x{1}{1},...
                        pointLabelArray,'UniformOutput',false);
                    % Read monitor point coordinate system and xyz
                    % coordinates
                    pointInfo2Array = arrayfun(@(x)...
                        sscanf(fileLinesArray{1}{x+4},...
                        '%*s = %d %*s = %f %*s = %f %*s = %f %*s = %d'),...
                        aerodynamicMonitorPointIndexVector(...
                        dynamicLogicalVector),...
                        'UniformOutput',false);
                    % Retrieve the integrated loads for all monitor points
                    % of current subcase
                    integratedLoadsArray = arrayfun(@(x) cell2mat(...
                        cellfun(@(y) sscanf(y,'%f %f %f %f')',...
                        fileLinesArray{1}(x+9:x+noTimeSteps-5),...
                        'UniformOutput',false)),...
                        aerodynamicMonitorPointIndexVector(...
                        dynamicLogicalVector),...
                        'UniformOutput',false);
                    % Iterate through the subcases and assign
                    % NastranMonitorPointIntegratedLoads objects to the
                    % AerodynamicMonitorPointIntegratedLoadsArray property of
                    % the subcase result
                    subcaseNoVector = cellfun(@(x) x{3},...
                        pointInfo1Array);
                    uniqueSubcaseVector = unique(subcaseNoVector);
                    for s=length(uniqueSubcaseVector):-1:1
                        % Find indices corresponding to current subcase
                        subcaseLogicalVector =...
                            subcaseNoVector == uniqueSubcaseVector(s);
                        % Generate NastranMonitorPointIntegratedLoads
                        % objects for current subcase
                        obj.SubcaseResultArray(uniqueSubcaseVector(s)...
                            ).AerodynamicMonitorPointIntegratedLoadsArray =...
                            NastranMonitorPointIntegratedLoads(struct(...
                            'monitorPointName',cellfun(@(x) x{1}{1},...
                            pointInfo1Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'component',cellfun(@(x) x{2}{1},...
                            pointInfo1Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'label',pointLabelArray(subcaseLogicalVector),...
                            'cp',cellfun(@(x) x(1),...
                            pointInfo2Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'x',cellfun(@(x) x(2),...
                            pointInfo2Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'y',cellfun(@(x) x(3),...
                            pointInfo2Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'z',cellfun(@(x) x(4),...
                            pointInfo2Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'cd',cellfun(@(x) x(5),...
                            pointInfo2Array(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'timeStep',cellfun(@(x) x(:,1),...
                            integratedLoadsArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'flexibleIncrement',cellfun(@(x) x(:,2),...
                            integratedLoadsArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'gust',cellfun(@(x) x(:,3),...
                            integratedLoadsArray(subcaseLogicalVector),...
                            'UniformOutput',false),...
                            'totalAero',cellfun(@(x) x(:,4),...
                            integratedLoadsArray(subcaseLogicalVector),...
                            'UniformOutput',false)));
                    end
                end
                fprintf(['Aerodynamic monitor point integrated loads ',...
                    'read.\n'])
            end
            %-------------------------------------------------------------%
            % Search for grid points force balance (one for each
            % subcase)
            gpForceBalanceIndexVector = find(strcmp(fileLinesArray{1},...
                'G R I D   P O I N T   F O R C E   B A L A N C E'));
            if ~isempty(gpForceBalanceIndexVector)
                fprintf(['Reading grid point force balance from .f06 f',...
                    'ile.\n'])
                % If grid point force balance output is present in the .f06
                % file, retrieve start and end line of grid point force
                % balance for each subcase
                startLineVector = gpForceBalanceIndexVector+3;
                endLineVector = endPageIndexVector(find(...
                    endPageIndexVector>startLineVector(1),...
                    length(startLineVector)))-1;
                % For each subcase retrieve the start and end line of each
                % point in the list
                pointStartLineArray = arrayfun(@(x) find(...
                    cellfun(@(y) str2double(y(1))==0,fileLinesArray{1}(...
                    startLineVector(x):endLineVector(x))))+...
                    startLineVector(x)-1,...
                    1:length(startLineVector),'UniformOutput',false);
                pointEndLineArray = arrayfun(@(x)...
                    [pointStartLineArray{x}-1;endLineVector(x)],...
                    1:length(pointStartLineArray),'UniformOutput',false);
                % Iterate through the subcases
                for i=1:length(startLineVector)
                    % First point (it is the only one that does not have a
                    % 0 at the beginning of the grid point force balance
                    % list)
                    pointFirstLineData = sscanf(fileLinesArray{1}{...
                        startLineVector(i)},'%d %d %s %f %f %f %f %f %f');
                    % Check whether element id is indicated and adjust
                    % reading format specification
                    if length(pointFirstLineData)==1
                        nestedCellArray = arrayfun(@(x) textscan(...
                            fileLinesArray{1}{x},...
                            '%d %s %f %f %f %f %f %f'),...
                            startLineVector(i):pointEndLineArray{i}(1),...
                            'UniformOutput',false)';
                        gpForceBalanceData{1} =...
                            vertcat(nestedCellArray{:});
                    else
                        nestedCellArray = arrayfun(@(x) textscan(...
                            fileLinesArray{1}{x},...
                            '%d %d %s %f %f %f %f %f %f'),...
                            startLineVector(i):pointEndLineArray{i}(1),...
                            'UniformOutput',false)';
                        gpForceBalanceData{1} =...
                            vertcat(nestedCellArray{:});
                    end
                    % Iterate through the rest of the points
                    for j=length(pointStartLineArray{i}):-1:1
                        % Check whether element id is indicated and adjust
                        % reading format specification
                        pointFirstLineData = sscanf(fileLinesArray{1}{...
                            pointStartLineArray{i}(j)},...
                            '%*d %d %d %s %f %f %f %f %f %f');
                        if length(pointFirstLineData)==1
                            pointFirstLineData = textscan(...
                                fileLinesArray{1}{...
                                pointStartLineArray{i}(j)},...
                                '%*d %d %s %f %f %f %f %f %f');
                            nestedCellArray = arrayfun(@(x) textscan(...
                                fileLinesArray{1}{x},...
                                '%d %s %f %f %f %f %f %f'),...
                                pointStartLineArray{i}(j)+1:...
                                pointEndLineArray{i}(j+1),...
                                'UniformOutput',false)';
                            gpForceBalanceData{j+1} = [pointFirstLineData;...
                                vertcat(nestedCellArray{:})];
                        else
                            pointFirstLineData = textscan(...
                                fileLinesArray{1}{...
                                pointStartLineArray{i}(j)},...
                                '%*d %d %d %s %f %f %f %f %f %f');
                            nestedCellArray = arrayfun(@(x) textscan(...
                                fileLinesArray{1}{x},...
                                '%d %d %s %f %f %f %f %f %f'),...
                                pointStartLineArray{i}(j)+1:...
                                pointEndLineArray{i}(j+1),...
                                'UniformOutput',false)';
                            gpForceBalanceData{j+1} = [pointFirstLineData;...
                                vertcat(nestedCellArray{:})];
                        end
                    end
                    % Generate NastranGridPointForceBalance object
                    % distinguishing whether the element id is indicated
                    if size(gpForceBalanceData{1},2)==8
                        obj.SubcaseResultArray(i).GridPointForceBalanceArray =...
                            NastranGridPointForceBalance(struct(...
                            'pointId',cellfun(@(x) x{1,1},...
                            gpForceBalanceData,...
                            'UniformOutput',false),...
                            'source',cellfun(@(x) x{:,2},...
                            gpForceBalanceData,...
                            'UniformOutput',false),...
                            't1',cellfun(@(x) x{:,3},gpForceBalanceData,...
                            'UniformOutput',false),...
                            't2',cellfun(@(x) x{:,4},gpForceBalanceData,...
                            'UniformOutput',false),...
                            't3',cellfun(@(x) x{:,5},gpForceBalanceData,...
                            'UniformOutput',false),...
                            'r1',cellfun(@(x) x{:,6},gpForceBalanceData,...
                            'UniformOutput',false),...
                            'r2',cellfun(@(x) x{:,7},gpForceBalanceData,...
                            'UniformOutput',false),...
                            'r3',cellfun(@(x) x{:,8},gpForceBalanceData,...
                            'UniformOutput',false)));
                    else
                        obj.SubcaseResultArray(i).GridPointForceBalanceArray =...
                            NastranGridPointForceBalance(struct(...
                            'pointId',cellfun(@(x) x{1,1},...
                            gpForceBalanceData,...
                            'UniformOutput',false),...
                            'elementId',cellfun(@(x) x{:,2},...
                            gpForceBalanceData,...
                            'UniformOutput',false),...
                            'source',cellfun(@(x) x{:,3},...
                            gpForceBalanceData,...
                            'UniformOutput',false),...
                            't1',cellfun(@(x) x{:,4},gpForceBalanceData,...
                            'UniformOutput',false),...
                            't2',cellfun(@(x) x{:,5},gpForceBalanceData,...
                            'UniformOutput',false),...
                            't3',cellfun(@(x) x{:,6},gpForceBalanceData,...
                            'UniformOutput',false),...
                            'r1',cellfun(@(x) x{:,7},gpForceBalanceData,...
                            'UniformOutput',false),...
                            'r2',cellfun(@(x) x{:,8},gpForceBalanceData,...
                            'UniformOutput',false),...
                            'r3',cellfun(@(x) x{:,9},gpForceBalanceData,...
                            'UniformOutput',false)));
                    end
                end
                fprintf('Grid point force balance read.\n')
            end
            %-------------------------------------------------------------%
            % Search for displacement vector sections (one for each
            % subcase)
            displacementIndexVector = find(contains(fileLinesArray{1},...
                'D I S P L A C E M E N T   V E C T O R'));
            if ~isempty(displacementIndexVector)
                fprintf('Reading displacement vector from .f06 file.\n')
                % If displacement vector output is present in the .f06
                % file, then retrieve start and end line of each
                % displacement vector entry
                startLineVector = displacementIndexVector+3;
                endLineVector = endPageIndexVector(find(...
                    endPageIndexVector>startLineVector(1),...
                    length(startLineVector)))-1;
                % For each real displacement vector table retrieve the
                % subcase nunmber
                if noSubcases>1
                    subcaseLineVector = displacementIndexVector-2;
                    displacementSubcaseIndexVector = cellfun(@(x)...
                        sscanf(x,'%*d %*s %d'),...
                        fileLinesArray{1}(subcaseLineVector));
                else
                    displacementSubcaseIndexVector = 1;
                end
                if contains(fileLinesArray{1}{startLineVector(1)-4},...
                        'POINT-ID')
                    % For the first displacement vector entry, check
                    % whether point-id is indicated. If so, each
                    % displacement vector entry consists of a time series
                    % Retrieve the time series for each displacement vector
                    % entry
                    displacementArray = arrayfun(@(x) cell2mat(...
                        cellfun(@(y)sscanf(y,'%f %*s %f %f %f %f %f %f')',...
                        fileLinesArray{1}(...
                        startLineVector(x):endLineVector(x)),...
                        'UniformOutput',false)),...
                        1:length(startLineVector),'UniformOutput',false);
                    % Retrieve vector of Grid object sorted by id
                    %                     [~,locationGridIdVector] = ismember(...
                    %                         gridPointIdVector,[obj.BulkData.GridArray.Id]);
                    %                     timeSeriesGridVector =...
                    %                         obj.BulkData.GridArray(locationGridIdVector);
                    % Check whether grid or modal displacement
                    if size(displacementArray{1},2)==2
                        % If modal displacement find the mode ids
                        modeIdVector = cellfun(@(x)...
                            sscanf(x,'POINT-ID = %d')',...
                            fileLinesArray{1}(startLineVector-4));
                        % Generate vector of NastranDisplacement object
                        displacementObjectArray =...
                            NastranDisplacement(struct(...
                            'parentGrid',num2cell(modeIdVector),...
                            'type',repmat({'M'},size(modeIdVector)),...
                            'time',cellfun(@(x)x(:,1)',displacementArray,...
                            'UniformOutput',false)',...
                            't1',cellfun(@(x)x(:,2)',displacementArray,...
                            'UniformOutput',false)'));
                    else
                        % If grid displacement
                        % Generate vector of NastranDisplacement object
                        displacementObjectArray =...
                            NastranDisplacement(struct(...
                            'parentGrid',num2cell(sortedGridArray),...
                            'type',repmat({'G'},size(sortedGridArray)),...
                            'time',cellfun(@(x)x(:,1)',displacementArray,...
                            'UniformOutput',false)',...
                            't1',cellfun(@(x)x(:,2)',displacementArray,...
                            'UniformOutput',false)',...
                            't2',cellfun(@(x)x(:,3)',displacementArray,...
                            'UniformOutput',false)',...
                            't3',cellfun(@(x)x(:,4)',displacementArray,...
                            'UniformOutput',false)',...
                            'r1',cellfun(@(x)x(:,5)',displacementArray,...
                            'UniformOutput',false)',...
                            'r2',cellfun(@(x)x(:,6)',displacementArray,...
                            'UniformOutput',false)',...
                            'r3',cellfun(@(x)x(:,7)',displacementArray,...
                            'UniformOutput',false)'));
                    end
                        % Assign array of NastranDisplacement object to
                        % SubcaseResultArray of current NastranAnalysis object
                        obj.SubcaseResultArray.DisplacementArray =...
                            displacementObjectArray;
                else
                    % Generate cell array with one cell for each subcase
                    % and with displacement data of all grid points in
                    % each cell
                    displacementArray = arrayfun(@(x) cell2mat(cellfun(...
                        @(y)sscanf(y,'%d %*s %f %f %f %f %f %f')',...
                        fileLinesArray{1}(...
                        startLineVector(x):endLineVector(x)),...
                        'UniformOutput',false)),...
                        1:length(startLineVector),'UniformOutput',false);
                    % Generate a cell array with one cell for each subcase
                    % and with an array of NastranDisplacement objects in
                    % each cell
                    displacementObjectArray = cellfun(@(x)...
                        NastranDisplacement(struct(...
                        'parentGrid',num2cell(sortedGridArray),...
                        't1',num2cell(x(:,2)),...
                        't2',num2cell(x(:,3)),...
                        't3',num2cell(x(:,4)),...
                        'r1',num2cell(x(:,5)),...
                        'r2',num2cell(x(:,6)),...
                        'r3',num2cell(x(:,7)))),...
                        displacementArray,'UniformOutput',false);
                    % Assign an array of NastranDisplacement objects to
                    % each subcase containing a displacement vector table
                    for i=1:length(displacementSubcaseIndexVector)
                        obj.SubcaseResultArray(...
                            displacementSubcaseIndexVector(i)...
                            ).DisplacementArray =...
                            displacementObjectArray{i};
                    end
                    %                     % Obtain the index vector that maps the retreived
                    %                     % displacement vector array to the grid points of the
                    %                     % NastranBulkData object
                    %                     [~,locationGridIdVector] =...
                    %                         ismember(displacementArray{1}(:,1),...
                    %                         [obj.BulkData.GridArray.Id]);
                    %                     % Assign the NastranDisplacement objects to each
                    %                     % corresponding grid point
                    %                     [obj.BulkData.GridArray(locationGridIdVector...
                    %                         ).DisplacementVector] =...
                    %                         displacementObjectArray{:};
                end
                fprintf('Displacement vector read.\n')
            end
            %-------------------------------------------------------------%
            % Search for forces of single-point constraint sections (one
            % for each subcase)
            forceSpcIndexVector = find(contains(fileLinesArray{1},...
                ['F O R C E S   O F   S I N G L E - P O I N T   C O N ',...
                'S T R A I N T']));
            if ~isempty(forceSpcIndexVector)
                fprintf('Reading displacement vector from .f06 file.\n')
                % Distinguish between static and dynamic monitor point
                % integrated loads
                staticLogicalVector = contains(fileLinesArray{1}(...
                    forceSpcIndexVector-2),'SUBCASE');
                % Read static single-point constraint forces
                if any(staticLogicalVector)
                    % Find start and end lines of tables
                    startLineVector = forceSpcIndexVector(...
                        staticLogicalVector)+3;
                    endLineVector = arrayfun(@(x) endPageIndexVector(...
                        find(endPageIndexVector>x,1)),startLineVector)-1;
                    % Find corresponding subcase number
                    subcaseNoVector = arrayfun(@(x) sscanf(...
                        fileLinesArray{1}{x-2},'%*d SUBCASE %d'),...
                        forceSpcIndexVector(staticLogicalVector));
                    % Read single-point constraint forces
                    forceSpcArray = arrayfun(@(x) cell2mat(...
                        cellfun(@(y)sscanf(y,'%d %*s %f %f %f %f %f %f')',...
                        fileLinesArray{1}(...
                        startLineVector(x):endLineVector(x)),...
                        'UniformOutput',false)),...
                        1:length(startLineVector),'UniformOutput',false);
                    % Iterate through the subcases and assign
                    % NastranMonitorPointIntegratedLoads objects to the
                    % StructuralMonitorPointIntegratedLoadsArray property of
                    % the subcase result
                    for s=length(subcaseNoVector):-1:1
                        % If grid force, find vector of Grid objects
                        % corresponding to point-id of single-point
                        % constraint forces
                        gridPointIdVector = forceSpcArray{s}(:,1);
                        [~,locationGridIdVector] = ismember(...
                            gridPointIdVector,[obj.BulkData.GridArray.Id]);
                        inputGridVector =...
                            obj.BulkData.GridArray(locationGridIdVector);
                        % Generate vector of NastranForce object
                        obj.SubcaseResultArray(s).ForceSpcArray =...
                            NastranForce(struct(...
                            'parentGrid',num2cell(inputGridVector),...
                            't1',num2cell(forceSpcArray{s}(:,2)),...
                            't2',num2cell(forceSpcArray{s}(:,3)),...
                            't3',num2cell(forceSpcArray{s}(:,4)),...
                            'r1',num2cell(forceSpcArray{s}(:,5)),...
                            'r2',num2cell(forceSpcArray{s}(:,6)),...
                            'r3',num2cell(forceSpcArray{s}(:,7))));
                    end
                end
                % Read dynamic monitor point integrated loads
                dynamicLogicalVector = ~staticLogicalVector;
                if any(dynamicLogicalVector)
                    % Find start and end lines of tables
                    startLineVector = forceSpcIndexVector(...
                        dynamicLogicalVector)+3;
                    endLineVector = arrayfun(@(x) endPageIndexVector(...
                        find(endPageIndexVector>x,1)),startLineVector)-1;
                    % Read point id
                    pointIdVector = cellfun(@(x) sscanf(x,...
                        'POINT-ID = %d'),fileLinesArray{1}(...
                        forceSpcIndexVector-1));
                    % Read single-point constraint forces
                    forceSpcArray = arrayfun(@(x) cell2mat(...
                        cellfun(@(y)sscanf(y,'%f %*s %f %f %f %f %f %f')',...
                        fileLinesArray{1}(...
                        startLineVector(x):endLineVector(x)),...
                        'UniformOutput',false)),...
                        1:length(startLineVector),'UniformOutput',false);
                    % If grid force, find vector of Grid objects
                        % corresponding to point-id of single-point
                        % constraint forces
                        [~,locationGridIdVector] = ismember(...
                            pointIdVector,[obj.BulkData.GridArray.Id]);
                        inputGridVector =...
                            obj.BulkData.GridArray(locationGridIdVector);
                        % Generate vector of NastranForce object
                        obj.SubcaseResultArray.ForceSpcArray =...
                            NastranForce(struct(...
                            'parentGrid',num2cell(inputGridVector),...
                            'time',cellfun(@(x) x(:,1),forceSpcArray,...
                            'UniformOutput',false),...
                            't1',cellfun(@(x) x(:,2),forceSpcArray,...
                            'UniformOutput',false),...
                            't2',cellfun(@(x) x(:,3),forceSpcArray,...
                            'UniformOutput',false),...
                            't3',cellfun(@(x) x(:,4),forceSpcArray,...
                            'UniformOutput',false),...
                            'r1',cellfun(@(x) x(:,5),forceSpcArray,...
                            'UniformOutput',false),...
                            'r2',cellfun(@(x) x(:,6),forceSpcArray,...
                            'UniformOutput',false),...
                            'r3',cellfun(@(x) x(:,7),forceSpcArray,...
                            'UniformOutput',false)));
                end
                fprintf('Forces of single-point constraint read.\n')
            end
            %-------------------------------------------------------------%
            % Search for stresses in quadrilateral elements sections (one
            % for eac subcase)
            cquad4StressIndexVector = find(strcmp(fileLinesArray{1},...
                ['S T R E S S E S   I N   Q U A D R I L A T E R A L   ',...
                'E L E M E N T S   ( Q U A D 4 )']));
            if ~isempty(cquad4StressIndexVector)
                % Retrieve start and end line of stresses for each subcase
                fprintf(['Reading stresses in quadrilateral elements ',...
                    'from .f06file.\n'])
                startLineVector = cquad4StressIndexVector+3;
                endLineVector = arrayfun(@(x) endPageIndexVector(find(...
                    endPageIndexVector>x,1))-2,startLineVector);
                % For each stresses in quadrilateral elements table
                % retrieve the subcase nunmber
                if noSubcases>1
                    subcaseLineVector = cquad4StressIndexVector-2;
                    cquad4StressSubcaseIndexVector = cellfun(@(x)...
                        sscanf(x,'%*d %*s %d'),...
                        fileLinesArray{1}(subcaseLineVector));
                else
                    cquad4StressSubcaseIndexVector = 1;
                end
                if contains(fileLinesArray{1}{startLineVector(1)-5},...
                        'ELEMENT-ID')
                    % For the first stress entry, check
                    % whether element-id is indicated. If so, each
                    % stress entry consists of a time series
                    % Retrieve the grid points ids
                    elementIdVector = cellfun(@(x)...
                        sscanf(x,'ELEMENT-ID = %d')',...
                        fileLinesArray{1}(startLineVector-5));
                    % Retrieve the time vector for each element
                    timeArray = arrayfun(@(x) arrayfun(@(y)...
                        sscanf(fileLinesArray{1}{y},['%*d %f',...
                        repmat(' %*f',1,8)])',...
                        startLineVector(x):2:endLineVector(x)),...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Retrieve the array containing the stress state of all
                    % cquad4 elements
                    stressDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %*f',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Retrive the vector containing all the Cquad4 objects in
                    % the NastranBulkData object
                    cquad4ElementsVector = obj.BulkData.getAllCquad4Elements;
                    % Obtain the index vector that maps the retreived
                    % stress array to the Cquad4 elements of the
                    % NastranBulkData object
                    [~,locationCquad4IdVector] = ismember(elementIdVector,...
                        [cquad4ElementsVector.Eid]);
                    timeSeriesElementVector =...
                        cquad4ElementsVector(locationCquad4IdVector);
                    % Generate a cell array with a vector of StressInElement
                    % object (representing all the subcases) in each cell
                    stressObjectArray =...
                        NastranStressInElement(struct(...
                        'parentElement',num2cell(timeSeriesElementVector),...
                        'time',timeArray,...
                        'stressData',stressDataArray));
                    % Assign array of NastranStressInElement object to
                    % SubcaseResultArray of current NastranAnalysis object
                    obj.SubcaseResultArray.StressInElementArray =...
                        stressObjectArray;
                else
                    % If no element-id is specified then the results refer
                    % to a static condition
                    % Generate a cell array containing one cell for each
                    % subcase, a cell array corresponding to all elements
                    % for each subcase cell and the stress in each cell
                    % corresponding to an element
                    stressDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %d',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y},'%*d %d'),...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false);
                    % Generate a cell array with one element for each
                    % subcase and containing an array of
                    % NastranStressInElement objects for all elements
                    stressObjectArray = cellfun(@(x)...
                        NastranStressInElement(struct(...
                        'parentElement',num2cell(sortedCquad4Array),...
                        'stressData',x)),stressDataArray,...
                        'UniformOutput',false);
                    % Assign the array of NastranStressInElement objects to
                    % each subcase containing a stress in quadrilateral
                    % elements table
                    for i=1:length(cquad4StressSubcaseIndexVector)
                        obj.SubcaseResultArray(...
                            cquad4StressSubcaseIndexVector(i)...
                            ).StressInElementArray = vertcat(...
                            obj.SubcaseResultArray(...
                            cquad4StressSubcaseIndexVector(i)...
                            ).StressInElementArray,...
                            stressObjectArray{i});
                    end
                    %                     % Retrive the vector containing all the Cquad4 objects in
                    %                     % the NastranBulkData object
                    %                     cquad4ElementsVector = obj.BulkData.getAllCquad4Elements;
                    %                     % Obtain the index vector that maps the retreived
                    %                     % stress array to the Cquad4 elements of the
                    %                     % NastranBulkData object
                    %                     [~,locationCquad4IdVector] =...
                    %                         ismember(cellfun(@(x) x(1,1),stressDataArray{1}),...
                    %                         [cquad4ElementsVector.Eid]);
                    %                     % Assign the StressInElement objects to each corresponding
                    %                     % Cquad4 element
                    %                     [cquad4ElementsVector(locationCquad4IdVector).Stress] =...
                    %                         stressObjectArray{:};
                end
                fprintf('Stresses in quadrilateral elements read.\n')
            end
            %-------------------------------------------------------------%
            % Search for stresses in triangular elements sections (one
            % for eac subcase)
            ctria3StressIndexVector = find(strcmp(fileLinesArray{1},...
                ['S T R E S S E S   I N   T R I A N G U L A R   E L E ',...
                'M E N T S   ( T R I A 3 )']));
            if ~isempty(ctria3StressIndexVector)
                % Retrieve start and end line of stresses for each subcase
                fprintf(['Reading stresses in triangular elements from',...
                    '.f06file.\n'])
                startLineVector = ctria3StressIndexVector+3;
                endLineVector = arrayfun(@(x) endPageIndexVector(find(...
                    endPageIndexVector>x,1))-2,startLineVector);
                % For each stresses in quadrilateral elements table
                % retrieve the subcase nunmber
                if noSubcases>1
                    subcaseLineVector = ctria3StressIndexVector-2;
                    ctria3StressSubcaseIndexVector = cellfun(@(x)...
                        sscanf(x,'%*d %*s %d'),...
                        fileLinesArray{1}(subcaseLineVector));
                else
                    ctria3StressSubcaseIndexVector = 1;
                end
                if contains(fileLinesArray{1}{startLineVector(1)-5},...
                        'ELEMENT-ID')
                    % For the first stress entry, check
                    % whether element-id is indicated. If so, each
                    % stress entry consists of a time series
                    % Retrieve the grid points ids
                    elementIdVector = cellfun(@(x)...
                        sscanf(x,'ELEMENT-ID = %d')',...
                        fileLinesArray{1}(startLineVector-5));
                    % Retrieve the time vector for each element
                    timeArray = arrayfun(@(x) arrayfun(@(y)...
                        sscanf(fileLinesArray{1}{y},['%*d %f',...
                        repmat(' %*f',1,8)])',...
                        startLineVector(x):2:endLineVector(x)),...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Retrieve the array containing the stress state of all
                    % cquad4 elements
                    stressDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %*f',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Retrive the vector containing all the Cquad4 objects in
                    % the NastranBulkData object
                    ctria3ElementsVector = obj.BulkData.getAllCtria3Elements;
                    % Obtain the index vector that maps the retreived
                    % stress array to the Cquad4 elements of the
                    % NastranBulkData object
                    [~,locationCtria3IdVector] = ismember(elementIdVector,...
                        [ctria3ElementsVector.Eid]);
                    timeSeriesElementVector =...
                        ctria3ElementsVector(locationCtria3IdVector);
                    % Generate a cell array with a vector of StressInElement
                    % object (representing all the subcases) in each cell
                    stressObjectArray =...
                        NastranStressInElement(struct(...
                        'parentElement',num2cell(timeSeriesElementVector),...
                        'time',timeArray,...
                        'stressData',stressDataArray));
                    % Assign array of NastranStressInElement object to
                    % SubcaseResultArray of current NastranAnalysis object
                    obj.SubcaseResultArray.StressInElementArray =...
                        [obj.SubcaseResultArray.StressInElementArray;...
                        stressObjectArray];
                else
                    % If no element-id is specified then the results refer
                    % to a static condition
                    % Generate a cell array containing one cell for each
                    % subcase, a cell array corresponding to all elements
                    % for each subcase cell and the stress in each cell
                    % corresponding to an element
                    stressDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %d',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y},'%*d %d'),...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false);
                    % In case of warnings in the .f06 file, the
                    % stressDataArray may have empty cells because the end
                    % line of the stress table is wrong. In that case it is
                    % necessary to remove the cells starting from the first
                    % empty one
                    emptyStressIndex = find(cellfun(@(x)...
                        isempty(x),stressDataArray{1}),1);
                    if ~isempty(emptyStressIndex)
                        stressDataArray{1} =...
                            stressDataArray{1}(1:emptyStressIndex-1);
                    end
                    % Generate a cell array with one element for each
                    % subcase and containing an array of
                    % NastranStressInElement objects for all elements
                    stressObjectArray = cellfun(@(x)...
                        NastranStressInElement(struct(...
                        'parentElement',num2cell(sortedCtria3Array),...
                        'stressData',x)),stressDataArray,...
                        'UniformOutput',false);
                    % Assign the array of NastranStressInElement objects to
                    % each subcase containing a stress in quadrilateral
                    % elements table
                    for i=1:length(ctria3StressSubcaseIndexVector)
                        obj.SubcaseResultArray(...
                            ctria3StressSubcaseIndexVector(i)...
                            ).StressInElementArray = vertcat(...
                            obj.SubcaseResultArray(...
                            ctria3StressSubcaseIndexVector(i)...
                            ).StressInElementArray,...
                            stressObjectArray{i});
                    end
                end
                fprintf('Stresses in triangular elements read.\n')
            end
            %-------------------------------------------------------------%
            % Search for strain in quadrilateral elements sections (one
            % for eac subcase)
            cquad4StrainIndexVector = find(strcmp(fileLinesArray{1},...
                ['S T R A I N S   I N   Q U A D R I L A T E R A L   ',...
                'E L E M E N T S   ( Q U A D 4 )']));
            if ~isempty(cquad4StrainIndexVector)
                % Retrieve start and end line of stresses for each subcase
                fprintf(['Reading strains in quadrilateral elements from .',...
                    'f06 file.\n'])
                startLineVector = cquad4StrainIndexVector+3;
                endLineVector = arrayfun(@(x) endPageIndexVector(find(...
                    endPageIndexVector>x,1))-2,startLineVector);
                % For each strains in quadrilateral elements table
                % retrieve the subcase number
                if noSubcases>1
                    subcaseLineVector = cquad4StrainIndexVector-2;
                    cquad4StrainSubcaseIndexVector = cellfun(@(x)...
                        sscanf(x,'%*d %*s %d'),...
                        fileLinesArray{1}(subcaseLineVector));
                else
                    cquad4StrainSubcaseIndexVector = 1;
                end
                if contains(fileLinesArray{1}{startLineVector(1)-5},...
                        'ELEMENT-ID')
                    % For the first stress entry, check
                    % whether element-id is indicated. If so, each
                    % stress entry consists of a time series
                    % Retrieve the grid points ids
                    elementIdVector = cellfun(@(x)...
                        sscanf(x,'ELEMENT-ID = %d')',...
                        fileLinesArray{1}(startLineVector-5));
                    % Retrieve the time vector for each element
                    timeArray = arrayfun(@(x) arrayfun(@(y)...
                        sscanf(fileLinesArray{1}{y},['%*d %f',...
                        repmat(' %*f',1,8)])',...
                        startLineVector(x):2:endLineVector(x)),...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Retrieve the array containing the stress state of all
                    % cquad4 elements
                    strainDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %*f',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Obtain the index vector that maps the retreived
                    % stress array to the Cquad4 elements of the
                    % NastranBulkData object
                    [~,locationCquad4IdVector] = ismember(elementIdVector,...
                        [cquad4ElementsVector.Eid]);
                    timeSeriesElementVector =...
                        cquad4ElementsVector(locationCquad4IdVector);
                    % Generate a cell array with a vector of StressInElement
                    % object (representing all the subcases) in each cell
                    strainObjectArray =...
                        NastranStrainInElement(struct(...
                        'parentElement',num2cell(timeSeriesElementVector),...
                        'time',timeArray,...
                        'strainData',strainDataArray));
                    % Assign array of NastranStressInElement object to
                    % SubcaseResultArray of current NastranAnalysis object
                    obj.SubcaseResultArray.StrainInElementArray =...
                        strainObjectArray;
                else
                    % If no element-id is specified then the results refer
                    % to a static condition
                    % Generate a cell array containing one cell for each
                    % subcase, a cell array corresponding to all elements
                    % for each subcase cell and the strains in each cell
                    % corresponding to an element
                    strainDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %d',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y},'%*d %d'),...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false);
                    % Generate a cell array with one element for each
                    % subcase and containing an array of
                    % NastranStrainInElement objects for all elements
                    strainObjectArray = cellfun(@(x)...
                        NastranStrainInElement(struct(...
                        'parentElement',num2cell(sortedCquad4Array),...
                        'strainData',x)),strainDataArray,...
                        'UniformOutput',false);
                    % Assign the array of NastranStressInElement objects to
                    % each subcase containing a stress in quadrilateral
                    % elements table
                    for i=1:length(cquad4StrainSubcaseIndexVector)
                        obj.SubcaseResultArray(...
                            cquad4StrainSubcaseIndexVector(i)...
                            ).StrainInElementArray = vertcat(...
                            obj.SubcaseResultArray(...
                            cquad4StrainSubcaseIndexVector(i)...
                            ).StrainInElementArray,...
                            strainObjectArray{i});
                    end
                end
                fprintf('Strains in quadrilateral elements read.\n')
            end
            %-------------------------------------------------------------%
            % Search for stresses in triangular elements sections (one
            % for each subcase)
            ctria3StrainIndexVector = find(strcmp(fileLinesArray{1},...
                ['S T R A I N S   I N   T R I A N G U L A R   E L E ',...
                'M E N T S   ( T R I A 3 )']));
            if ~isempty(ctria3StrainIndexVector)
                % Retrieve start and end line of stresses for each subcase
                fprintf(['Reading strains in triangular elements from .f06',...
                    'file.\n'])
                startLineVector = ctria3StrainIndexVector+3;
                endLineVector = arrayfun(@(x) endPageIndexVector(find(...
                    endPageIndexVector>x,1))-2,startLineVector);
                % For each strains in quadrilateral elements table
                % retrieve the subcase number
                if noSubcases>1
                    subcaseLineVector = ctria3StrainIndexVector-2;
                    ctria3StrainSubcaseIndexVector = cellfun(@(x)...
                        sscanf(x,'%*d %*s %d'),...
                        fileLinesArray{1}(subcaseLineVector));
                else
                    ctria3StrainSubcaseIndexVector = 1;
                end
                if contains(fileLinesArray{1}{startLineVector(1)-5},...
                        'ELEMENT-ID')
                    % For the first stress entry, check
                    % whether element-id is indicated. If so, each
                    % stress entry consists of a time series
                    % Retrieve the grid points ids
                    elementIdVector = cellfun(@(x)...
                        sscanf(x,'ELEMENT-ID = %d')',...
                        fileLinesArray{1}(startLineVector-5));
                    % Retrieve the time vector for each element
                    timeArray = arrayfun(@(x) arrayfun(@(y)...
                        sscanf(fileLinesArray{1}{y},['%*d %f',...
                        repmat(' %*f',1,8)])',...
                        startLineVector(x):2:endLineVector(x)),...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Retrieve the array containing the stress state of all
                    % cquad4 elements
                    strainDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %*f',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false)';
                    % Obtain the index vector that maps the retreived
                    % stress array to the Cquad4 elements of the
                    % NastranBulkData object
                    [~,locationCtria3IdVector] = ismember(elementIdVector,...
                        [ctria3ElementsVector.Eid]);
                    timeSeriesElementVector =...
                        ctria3ElementsVector(locationCtria3IdVector);
                    % Generate a cell array with a vector of StressInElement
                    % object (representing all the subcases) in each cell
                    strainObjectArray =...
                        NastranStrainInElement(struct(...
                        'parentElement',num2cell(timeSeriesElementVector),...
                        'time',timeArray,...
                        'strainData',strainDataArray));
                    % Assign array of NastranStressInElement object to
                    % SubcaseResultArray of current NastranAnalysis object
                    obj.SubcaseResultArray.StrainInElementArray =...
                        [obj.SubcaseResultArray.StrainInElementArray;...
                        strainObjectArray];
                else
                    % If no element-id is specified then the results refer
                    % to a static condition
                    % Generate a cell array containing one cell for each
                    % subcase, a cell array corresponding to all elements
                    % for each subcase cell and the strains in each cell
                    % corresponding to an element
                    strainDataArray = arrayfun(@(x) arrayfun(@(y)...
                        [sscanf(fileLinesArray{1}{y},['%*d %d',...
                        repmat(' %f',1,8)])';...
                        sscanf(fileLinesArray{1}{y},'%*d %d'),...
                        sscanf(fileLinesArray{1}{y+1},...
                        ['%f',repmat(' %f',1,7)])'],...
                        startLineVector(x):2:endLineVector(x),...
                        'UniformOutput',false)',...
                        1:length(startLineVector),'UniformOutput',false);
                    % Generate a cell array with one element for each
                    % subcase and containing an array of
                    % NastranStrainInElement objects for all elements
                    strainObjectArray = cellfun(@(x)...
                        NastranStrainInElement(struct(...
                        'parentElement',num2cell(sortedCtria3Array),...
                        'strainData',x)),strainDataArray,...
                        'UniformOutput',false);
                    % Assign the array of NastranStressInElement objects to
                    % each subcase containing a strain in triangular
                    % elements table
                    for i=1:length(ctria3StrainSubcaseIndexVector)
                        obj.SubcaseResultArray(...
                            ctria3StrainSubcaseIndexVector(i)...
                            ).StrainInElementArray = vertcat(...
                            obj.SubcaseResultArray(...
                            ctria3StrainSubcaseIndexVector(i)...
                            ).StrainInElementArray,...
                            strainObjectArray{i});
                    end
                end
                fprintf('Strains in triangular elements read.\n')
            end
        end
    end
end

%% Alternative way to read stress (necessary to read stresses in elements in eigenvalue analysis)
% % Search for stresses in quadrilateral elements sections (one
% % for eac subcase)
% cquad4StressIndexVector = find(strcmp(fileLinesArray{1},...
%     ['S T R E S S E S   I N   Q U A D R I L A T E R A L   ',...
%     'E L E M E N T S   ( Q U A D 4 )']));
% % Retrieve start and end line of stresses for each subcase
% fprintf(['Reading stresses in quadrilateral elements from ',...
%     '.f06 file.\n'])
% startLineVector = cquad4StressIndexVector+3;
% endLineVector = arrayfun(@(x) endPageIndexVector(find(...
%     endPageIndexVector>x,1))-1,startLineVector);
% % For each stress table retrieve the subcase no
% if noSubcases>1
%     subcaseLineVector = cquad4StressIndexVector-2;
%     subcaseNoVector = cellfun(@(x) sscanf(x,'%*d %*s %d'),...
%         fileLinesArray{1}(subcaseLineVector));
% else
%     subcaseNoVector = 1;
% end
% % Retrieve the array containing the stress state of all
% % cquad4 elements
% stressDataArray = arrayfun(@(x) arrayfun(@(y)...
%     num2cell([sscanf(fileLinesArray{1}{y},['%*d %d',...
%     repmat(' %f',1,8)])';...
%     sscanf(fileLinesArray{1}{y},'%*d %d'),...
%     sscanf(fileLinesArray{1}{y+1},...
%     ['%f',repmat(' %f',1,7)])'],1),...
%     startLineVector(x):2:endLineVector(x),...
%     'UniformOutput',false)',...
%     1:length(startLineVector),'UniformOutput',false);
% stressDataArray = cellfun(@(x) vertcat(x{:}),...
%     stressDataArray,'UniformOutput',false);
% % Retrive the vector containing all the Cquad4 objects in
% % the NastranBulkData object
% cquad4ElementsVector = obj.BulkData.getAllCquad4Elements;
% % Retrieve vector of Cquad4 object sorted by eid
% [~,locationCquad4EidVector] = ismember(...
%     sort([cquad4ElementsVector.Eid]),...
%     [cquad4ElementsVector.Eid]);
% sortedCquad4Vector =...
%     cquad4ElementsVector(locationCquad4EidVector);
% % Generate a cell array with a vector of NastranStressInElement
% % object (representing all the subcases) in each cell
% stressObjectArray = cellfun(@(x) NastranStressInElement(...
%     struct('parentElement',num2cell(sortedCquad4Vector),...
%     'fiberDistance',x(:,2),...
%     'normalX',x(:,3),...
%     'normalY',x(:,4),...
%     'shearXy',x(:,5),...
%     'angle',x(:,6),...
%     'major',x(:,7),...
%     'minor',x(:,8),...
%     'maxShear',x(:,9))),...
%     stressDataArray,'UniformOutput',false);
% eigenvalueSubcaseNo = 0;
% for i=1:length(subcaseNoVector)
%     if isempty(obj.SubcaseResultVector(subcaseNoVector(i)...
%             ).EigenvalueArray)
%         obj.SubcaseResultVector(subcaseNoVector(i)...
%             ).StressInElement = stressObjectArray{i};
%     else
%         if subcaseNoVector(i)~=eigenvalueSubcaseNo
%             eigenvalueCounter = 1;
%         end
%         obj.SubcaseResultVector(subcaseNoVector(i)...
%             ).EigenvalueArray(eigenvalueCounter...
%             ).StressInElement = stressObjectArray{i};
%         eigenvalueCounter = eigenvalueCounter+1;
%     end
% end

% % Search for stresses in quadrilateral elements sections (one
% % for eac subcase)
% cquad4StressIndexVector = find(strcmp(fileLinesArray{1},...
%     ['S T R E S S E S   I N   Q U A D R I L A T E R A L   ',...
%     'E L E M E N T S   ( Q U A D 4 )']));
% if ~isempty(cquad4StressIndexVector)
%     % Retrieve start and end line of stresses for each subcase
%     fprintf(['Reading stresses in quadrilateral elements from ',...
%         '.f06 file.\n'])
%     startLineVector = cquad4StressIndexVector+3;
%     endLineVector = arrayfun(@(x) endPageIndexVector(find(...
%         endPageIndexVector>x,1))-1,startLineVector);
%     % For each stress table retrieve the subcase no
%     if noSubcases>1
%         subcaseLineVector = cquad4StressIndexVector-2;
%         subcaseNoVector = cellfun(@(x) sscanf(x,'%*d %*s %d'),...
%             fileLinesArray{1}(subcaseLineVector));
%     else
%         subcaseNoVector = 1;
%     end
%     % Retrieve the array containing the stress state of all
%     % cquad4 elements
%     stressDataArray = arrayfun(@(x) arrayfun(@(y)...
%         num2cell([sscanf(fileLinesArray{1}{y},['%*d %d',...
%         repmat(' %f',1,8)])';...
%         sscanf(fileLinesArray{1}{y},'%*d %d'),...
%         sscanf(fileLinesArray{1}{y+1},...
%         ['%f',repmat(' %f',1,7)])'],1),...
%         startLineVector(x):2:endLineVector(x),...
%         'UniformOutput',false)',...
%         1:length(startLineVector),'UniformOutput',false);
%     stressDataArray = cellfun(@(x) vertcat(x{:}),...
%         stressDataArray,'UniformOutput',false);
%     % Retrive the vector containing all the Cquad4 objects in
%     % the NastranBulkData object
%     cquad4ElementsVector = obj.BulkData.getAllCquad4Elements;
%     % Retrieve vector of Cquad4 object sorted by eid
%     [~,locationCquad4EidVector] = ismember(...
%         sort([cquad4ElementsVector.Eid]),...
%         [cquad4ElementsVector.Eid]);
%     sortedCquad4Vector =...
%         cquad4ElementsVector(locationCquad4EidVector);
%     % Generate a cell array with a vector of NastranStressInElement
%     % object (representing all the subcases) in each cell
%     stressObjectArray = cellfun(@(x) NastranStressInElement(...
%         struct('parentElement',num2cell(sortedCquad4Vector),...
%         'fiberDistance',x(:,2),...
%         'normalX',x(:,3),...
%         'normalY',x(:,4),...
%         'shearXy',x(:,5),...
%         'angle',x(:,6),...
%         'major',x(:,7),...
%         'minor',x(:,8),...
%         'maxShear',x(:,9))),...
%         stressDataArray,'UniformOutput',false);
%     for i=1:length(stressObjectArray)
%         obj.SubcaseResultVector(i).StressInElementArray =...
%             stressObjectArray{i};
%     end

% % Search for displacement vector sections (one for each
% % subcase)
% displacementIndexVector = find(strcmp(fileLinesArray{1},...
%     'D I S P L A C E M E N T   V E C T O R'));
% if ~isempty(displacementIndexVector)
%     fprintf('Reading displacement vector from .f06 file.\n')
%     % If displacement vector output is present in the .f06 file,
%     % retrieve start and end line of displacement vector for each
%     % subcase
%     startLineVector = displacementIndexVector+3;
%     endLineVector = endPageIndexVector(find(...
%         endPageIndexVector>startLineVector(1),...
%         length(startLineVector)))-1;
%     % Retrieve the displacement vector array of all grid points
%     displacementVectorDataArray = arrayfun(@(x) cell2mat(...
%         cellfun(@(y)sscanf(y,'%d %*s %f %f %f %f %f %f')',...
%         fileLinesArray{1}(...
%         startLineVector(x):endLineVector(x)),...
%         'UniformOutput',false)),...
%         1:length(startLineVector),'UniformOutput',false);
%     % Retrieve vector of Grid object sorted by id
%     [~,locationGridIdVector] = ismember(...
%         sort([obj.BulkData.GridArray.Id]),...
%         [obj.BulkData.GridArray.Id]);
%     sortedGridVector =...
%         obj.BulkData.GridArray(locationGridIdVector);
%     % Generate a cell array with a vector of DisplacementVector
%     % object (representing all the subcases) in each cell
%     displacementVectorObjectArray = cellfun(@(x)...
%         NastranDisplacementVector(struct(...
%         'parentGrid',num2cell(sortedGridVector),...
%         't1',num2cell(x(:,2)),...
%         't2',num2cell(x(:,3)),...
%         't3',num2cell(x(:,4)),...
%         'r1',num2cell(x(:,5)),...
%         'r2',num2cell(x(:,6)),...
%         'r3',num2cell(x(:,7)))),...
%         displacementVectorDataArray,'UniformOutput',false);
%     % Here the iteration does not take into account the subcase
%     % no of each displacement vector, so this should be changed
%     % in a later version
%     for i=1:length(displacementVectorObjectArray)
%         obj.SubcaseResultVector(i).DisplacementVectorArray =...
%             displacementVectorObjectArray{i};
%     end
%     fprintf('Displacement vector read.\n')
% end
