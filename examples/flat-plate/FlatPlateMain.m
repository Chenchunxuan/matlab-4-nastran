% Generates an aeroelastic model of a flat plate for a static and a gust
% simulation.

% Add matlab-4-nastran folder and subfolders to Matlab path
addpath(genpath(['..',filesep,'..']));
% Path to Nastran executable
nastranExecutblePath = ['C:\MSC.Software\MSC_Nastran_and_Patran_',...
    'Student_Editions\20190\Nastran\bin\nastranw.exe'];

%% Excel input file name
excelFilePath = ['F:\Users\fmami\Documents\TUDelft\Thesis\FEM\FlatPlate',...
    filesep,'FlatPlateInput.xlsx'];

%% Load input data
flatPlateSettingStruct = loadFlatPlateSettings(excelFilePath);

%% Initialize bulk data object
flatPlateBulkData = initializeBulkDataObject(flatPlateSettingStruct);

%% Generate structural mesh
% Determine south and north boundary of the flat plate
flatPlateBoundaryStruct.southBoundary = [0,0,0;...
    flatPlateSettingStruct.chord,0,0];
flatPlateBoundaryStruct.northBoundary = [0,0,flatPlateSettingStruct.span;...
    flatPlateSettingStruct.chord,0,flatPlateSettingStruct.span];
% Determine the number of chordwise and spanwise elements
chordwiseElementsNo = ceil(flatPlateSettingStruct.chord/...
    flatPlateSettingStruct.structuralEdgeSize);
spanwiseElementsNo = ceil(flatPlateSettingStruct.span/...
    flatPlateSettingStruct.structuralEdgeSize);
% Generate vector of Grid objects and array of Cquad4 objects
[gridVector,elementArray] = patch2NastranMesh(flatPlateBoundaryStruct,...
    spanwiseElementsNo,chordwiseElementsNo,flatPlateSettingStruct,...
    flatPlateBulkData.PartArray.RegionArray.ElementProperty.Pid);
% Assign gridVector and elementArray to the bulk data object
flatPlateBulkData.GridArray = gridVector;
flatPlateBulkData.PartArray.RegionArray.ElementArray = elementArray;

%% Apply clamp
applyFlatPlateClamp(flatPlateBulkData,flatPlateSettingStruct)

%% Generate aerodynamic model and aeroelastic coupling
generateFlatPlateAero(flatPlateBulkData,flatPlateSettingStruct)

%% Apply load cases
applyStaticLoadCase(flatPlateBulkData,flatPlateSettingStruct)

%% Add cards to bulk data
flatPlateBulkData.ParamArray = [flatPlateBulkData.ParamArray,...
    Param(struct('n','PRTMAXIM','v1','YES'))];
flatPlateBulkData.EigrlArray = Eigrl(struct(...
    'sid',flatPlateSettingStruct.lastSetId.addId,...
    'nd',20));

%% Make new folder for analysis of current flat plate configuration
mkdir(flatPlateSettingStruct.name)
cd(flatPlateSettingStruct.name)

%% Generate SOL 103 analysis object
sol103ExecutiveControl = NastranExecutiveControl(103);
sol103CaseControl = NastranCaseControl(struct(...
    'title',sprintf('FLAT PLATE %s',flatPlateSettingStruct.name),...
    'subti',sprintf(['STRUCTURAL ELEMENT EDGE SIZE: ',...
    '%.4f m, AERODYNAMIC ELEMENT EDGE SIZE: %.4f m'],...
    flatPlateSettingStruct.structuralEdgeSize,...
    flatPlateSettingStruct.aerodynamicEdgeSize),...
    'spc',flatPlateBulkData.Spc1Array,...
    'method',flatPlateBulkData.EigrlArray,...
    'strain',[],...
    'stress',[]));
sol103Analysis = NastranAnalysis(struct(...
    'name',flatPlateSettingStruct.name,...
    'executiveControl',sol103ExecutiveControl,...
    'caseControl',sol103CaseControl,...
    'bulkData',copy(flatPlateBulkData)));
% Run SOL 103
sol103Analysis.runAndLoadResults(nastranExecutblePath);
% Plot vibration modes frequency and save figure
sol103Analysis.SubcaseResultArray.EigenvalueArray.plotModeNoVsFrequency
saveNiceFigure({'VibrationModesFrequency'})
close all

%% Generate SOL 106 analysis object and run it
% Generate ExecutiveControl, CaseControl and Analysis object
sol106ExecutiveControl = NastranExecutiveControl(106);
sol106CaseControl = NastranCaseControl(struct(...
    'title',sprintf('FLAT PLATE %s',flatPlateSettingStruct.name),...
    'subti',sprintf(['STRUCTURAL ELEMENT EDGE SIZE: ',...
    '%.4f m, AERODYNAMIC ELEMENT EDGE SIZE: %.4f m'],...
    flatPlateSettingStruct.structuralEdgeSize,...
    flatPlateSettingStruct.aerodynamicEdgeSize),...
    'spc',flatPlateBulkData.Spc1Array,...
    'strain',[],...
    'stress',[]));
sol106Analysis = NastranAnalysis(struct(...
    'name',flatPlateSettingStruct.name,...
    'executiveControl',sol106ExecutiveControl,...
    'caseControl',sol106CaseControl,...
    'bulkData',copy(flatPlateBulkData)));
% Apply tip force
masterGridVector = sol106Analysis.BulkData.GridArray(...
    abs([sol106Analysis.BulkData.GridArray.X3]-flatPlateSettingStruct.span)<...
    flatPlateSettingStruct.structuralEdgeSize*1e-1);
referenceGrid = Grid(struct('xyzVector',...
    [flatPlateSettingStruct.chord/2,flatPlateSettingStruct.chord/2,...
    flatPlateSettingStruct.span],...
    'id',sol106Analysis.BulkData.LastGridId.addId));
sol106Analysis.BulkData.GridArray(end+1) = referenceGrid;
sol106Analysis.BulkData.Rbe3Array = Rbe3(struct(...
    'eid',sol106Analysis.BulkData.LastElementId.addId,...
    'referenceGrid',referenceGrid,...
    'refc',123456,...
    'wti',1,...
    'ci',1234,...
    'masterGridVector',masterGridVector));
forceVector = [0,2/1.4871*1.2594,0];  % [N]
applyForce(sol106Analysis.BulkData,referenceGrid,forceVector)
% sol106Analysis.BulkData.Rbe2 = Rbe2(struct(...
%     'eid',sol106Analysis.BulkData.LastElementId.addId,...
%     'independentGrid',referenceGrid,...
%     'cm',2,...
%     'dependentGridVector',masterGridVector));
% applyDisplacement(sol106Analysis.BulkData,referenceGrid,2,...
%     flatPlateSettingStruct.span*0.1)
sol106Analysis.CaseControl.Load = sol106Analysis.BulkData.LoadArray;
% Generate cards for nonlinear analysis
sol106Analysis.BulkData.NlparmArray = Nlparm(struct(...
    'id',sol106Analysis.BulkData.LastGridId.addId,...
    'ninc',10));
sol106Analysis.CaseControl.Nlparm = sol106Analysis.BulkData.NlparmArray;
sol106Analysis.BulkData.ParamArray = [sol106Analysis.BulkData.ParamArray,...
    Param(struct('n','LGDISP','v1',1))];
% Run SOL 106
sol106Analysis.runAndLoadResults(nastranExecutblePath);

%% Generate SOL 144 analysis object and run it
% Define set of grid points for grid point force balance output
setCase = Set(struct('n',flatPlateBulkData.LastSetId.addId,...
    'gridVector',flatPlateBulkData.Set1Array.GridVector));
% Generate objects
sol144ExecutiveControl = NastranExecutiveControl(144);
sol144CaseControl = NastranCaseControl(struct(...
    'title',sprintf('FLAT PLATE %s',flatPlateSettingStruct.name),...
    'subti',sprintf(['STRUCTURAL ELEMENT EDGE SIZE: ',...
    '%.4f m, AERODYNAMIC ELEMENT EDGE SIZE: %.4f m'],...
    flatPlateSettingStruct.structuralEdgeSize,...
    flatPlateSettingStruct.aerodynamicEdgeSize),...
    'spc',flatPlateBulkData.Spc1Array,...
    'strain','ALL',...
    'stress','ALL',...
    'subcaseVector',NastranSubcase(struct(...
    'trim',num2cell(flatPlateBulkData.TrimArray))),...
    'set',setCase,...
    'gpforce',setCase.N));
sol144Analysis = NastranAnalysis(struct(...
    'name',flatPlateSettingStruct.name,...
    'executiveControl',sol144ExecutiveControl,...
    'caseControl',sol144CaseControl,'bulkData',copy(flatPlateBulkData)));
% Run SOL 144
sol144Analysis.runAndLoadResults(nastranExecutblePath);

%% Generate SOL 146 analysis object and run it
% Apply gust load case
applyGustLoadCase(flatPlateBulkData,flatPlateSettingStruct)
% Generate objects
sol146ExecutiveControl = NastranExecutiveControl(146);
sol146CaseControl = NastranCaseControl(struct(...
    'title',sprintf('FLAT PLATE %s',flatPlateSettingStruct.name),...
    'subti',sprintf(['STRUCTURAL ELEMENT EDGE SIZE: ',...
    '%.4f m, AERODYNAMIC ELEMENT EDGE SIZE: %.4f m'],...
    flatPlateSettingStruct.structuralEdgeSize,...
    flatPlateSettingStruct.aerodynamicEdgeSize),...
    'spc',flatPlateBulkData.Spc1Array,...
    'method',flatPlateBulkData.EigrlArray,...
    'strain','',...
    'stress','',...
    'sdamp',flatPlateBulkData.Tabdmp1Array.Tid,...
    'gust',flatPlateBulkData.GustArray.Sid,...
    'dload',flatPlateBulkData.Tload1Array.Sid,...
    'freq',flatPlateBulkData.Freq1Array.Sid,...
    'tstep',flatPlateBulkData.TstepArray.Sid));
sol146Analysis = NastranAnalysis(struct(...
    'name',flatPlateSettingStruct.name,...
    'executiveControl',sol146ExecutiveControl,...
    'caseControl',sol146CaseControl,'bulkData',copy(flatPlateBulkData)));
% Run SOL 146
sol146Analysis.runAndLoadResults(nastranExecutblePath);
% Find index of the time vector where valid structural response ends
timeLimit = 1/flatPlateSettingStruct.gustLoadCaseFrequency*2.5;
timeLimitIndex = find(...
    sol146Analysis.SubcaseResultArray.DisplacementArray(1).Time<=...
    timeLimit,1,'last');
% Find maximum displacement over the time of valid structural response
absoluteDisplacementArray =vertcat(...
    sol146Analysis.SubcaseResultArray.DisplacementArray(...
    :).TranslationMagnitude);
maxDisplacement = max(max(absoluteDisplacementArray(:,1:timeLimitIndex)));
display(maxDisplacement)
display(maxDisplacement/flatPlateSettingStruct.span*100)

%% Go back to main folder
cd('..')
